type token =
  | BREAK
  | CONST
  | CONTINUE
  | CASE
  | DEFAULT
  | DO
  | ELSE
  | ENUM
  | STATIC
  | EXTERN
  | FOR
  | IF
  | REGISTER
  | AUTO
  | RETURN
  | VOLATILE
  | SWITCH
  | TYPEDEF
  | WHILE
  | GOTO
  | CHAR
  | DOUBLE
  | FLOAT
  | INT
  | SHORT
  | LONG
  | STRUCT
  | UNION
  | SIGNED
  | UNSIGNED
  | VOID
  | ELLIPSIS
  | COLON
  | COMMA
  | DOT
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | LPAREN
  | RPAREN
  | NOT
  | EQEQ
  | NOTEQ
  | EQ
  | OREQ
  | SHIFTLEQ
  | SHIFTREQ
  | MINUSEQ
  | PLUSEQ
  | STAREQ
  | DIVEQ
  | MODEQ
  | BXOREQ
  | AMPERSANDEQ
  | SEMICOLON
  | AMPERSAND
  | ARROW
  | AND
  | OR
  | MINUS
  | DIV
  | MOD
  | PLUS
  | MINUSMINUS
  | QMARK
  | PLUSPLUS
  | STAR
  | LT
  | LTEQ
  | GT
  | GTEQ
  | SHIFTL
  | SHIFTR
  | BXOR
  | BOR
  | BNOT
  | ATTRIBUTE
  | EXTENSION
  | VA_LIST
  | CDECL
  | INLINE
  | ASM
  | RESTRICT
  | BUILTIN_CONSTANT_P
  | FUNNAME
  | OFFSETOF
  | SIZEOF
  | TYPEOF
  | EOF
  | NPK of (Csyntax.assertion)
  | SYMBOL of (char)
  | IDENTIFIER of (string)
  | TYPEDEF_NAME of (string)
  | STRING of (string)
  | INTEGER of (string option * string * char option * string option)
  | CHARACTER of (int)
  | FLOATCST of (string * char option)

open Parsing;;
let _ = parse_error;;
# 26 "c2newspeak/parser.mly"

open Csyntax
open Lexing
open Synthack

let struct_cnt = ref 0

let new_id =
  let c = ref 0 in
  fun _ ->
    incr c;
    !c

let gen_struct_id () = 
  incr struct_cnt;
  "anon_struct"^(string_of_int !struct_cnt)
  
(* TODO: write checks for all the syntax that is thrown away in these functions
   !! *)

let get_loc () =
  let pos = Parsing.symbol_start_pos () in
    (pos.pos_fname, pos.pos_lnum, pos.pos_cnum-pos.pos_bol)

let apply_attrs attrs t =
  match (attrs, t) with
      ([], _) -> t
    | (new_sz::[], Int (sign, _)) -> Int (sign, new_sz)
    | (_::[], _) -> 
	Npkcontext.report_error "Parser.apply_attr" 
	  "wrong type, integer expected"
    | _ -> 
	Npkcontext.report_error "Parser.apply_attr" 
	  "more than one attribute not handled yet"

(* TODO: simplify by having just a function build_decl??? *)
let process_decls (build_sdecl, build_vdecl) (b, m) =
  let (sdecls, b) = Synthack.normalize_base_typ b in
  let build_vdecl ((v, attrs), init) res =
    let b = apply_attrs attrs b in
    let (t, x, loc) = Synthack.normalize_var_modifier b v in
      match x with
	| None -> res
	| Some x -> build_vdecl res (t, x, loc, init)
  in
  let sdecls = List.map build_sdecl sdecls in
  let vdecls = List.fold_right build_vdecl m [] in
    sdecls@vdecls
      
let build_glbdecl (static, extern) d =
  let build_vdecl l (t, x, loc, init) = 
    let d = 
      { t = t; is_static = static; is_extern = extern; initialization = init }
    in
    (GlbDecl (x, VDecl d), loc)::l
  in
  let loc = get_loc () in
  let build_sdecl x = (GlbDecl x, loc) in
    process_decls (build_sdecl, build_vdecl) d

(* TODO: clean this code and find a way to factor with previous function *)
let build_glbtypedef d =
  let build_vdecl l (t, x, _, _) = 
    Synthack.define_type x t;
    l
  in
  let loc = get_loc () in
  let build_sdecl x = (GlbDecl x, loc) in
    process_decls (build_sdecl, build_vdecl) d

let build_stmtdecl static extern d =
(* TODO: think about cleaning this location thing up!!! *)
(* for enum decls it seems the location is in double *)
  let build_vdecl l (t, x, loc, init) = 
(* TODO: factor the various VDecl creations!! *)
    let d = 
      { t = t; is_static = static; is_extern = extern; initialization = init }
    in
      (LocalDecl (x, VDecl d), loc)::l 
  in
  let loc = get_loc () in
  let build_sdecl x = (LocalDecl x, loc) in
    process_decls (build_sdecl, build_vdecl) d

(* TODO: clean this code and find a way to factor with previous function *)
let build_typedef d =
  let build_vdecl l (t, x, _, _) = 
    Synthack.define_type x t;
    l
  in
  let loc = get_loc () in
  let build_sdecl x = (LocalDecl x, loc) in
    process_decls (build_sdecl, build_vdecl) d

(* TODO: remove code?? *)
let normalize_fun_prologue b m =
  let (_, (t, x, loc)) = Synthack.normalize_decl (b, m) in
  let x =
    match x with
      | Some x -> x
      | None -> 
	  (* TODO: code cleanup remove these things !!! *)
	  Npkcontext.report_error "Firstpass.translate_global" 
	    "unknown function name"
  in
    (t, x, loc)

let build_fundef static ((b, m), body) =
  let (_, (t, x, loc)) = Synthack.normalize_decl (b, m) in
  let x =
    match x with
      | Some x -> x
      | None -> 
	  (* TODO: code cleanup remove these things !!! *)
	  Npkcontext.report_error "Firstpass.translate_global" 
	    "unknown function name"
  in
  let t = Csyntax.ftyp_of_typ t in
    (FunctionDef (x, t, static, body), loc)::[]

let build_type_decl d =
  let (sdecls, (t, _, _)) = Synthack.normalize_decl d in
    if (sdecls <> []) then begin 
      Npkcontext.report_error "Parser.build_type_decl" 
	"unexpected enum or composite declaration"
    end;
    t

let build_type_blk loc d =
  let (sdecls, (t, _, _)) = Synthack.normalize_decl d in
  let sdecls = List.map (fun x -> (LocalDecl x, loc)) sdecls in
    (sdecls, t)

let flatten_field_decl (b, x) = List.map (fun (v, i) -> (b, v, i)) x

(* TODO: simplify and put in synthack so as to optimize?? *)
let build_funparams params types =
  let has_name x d =
    match Synthack.normalize_decl d with
	(_, (_, Some y, _)) when x = y -> true
      | _ -> false
  in
  let add_param_type x = List.find (has_name x) types in
    List.map add_param_type params

let report_asm tokens =
  let loc = "Parser.report_asm" in
  let tokens = ListUtils.to_string (fun x -> x) "' '" tokens in
  let msg = "asm directive '"^tokens^"'" in
    Npkcontext.report_ignore_warning loc msg Npkcontext.Asm
# 255 "c2newspeak/parser.ml"
let yytransl_const = [|
  257 (* BREAK *);
  258 (* CONST *);
  259 (* CONTINUE *);
  260 (* CASE *);
  261 (* DEFAULT *);
  262 (* DO *);
  263 (* ELSE *);
  264 (* ENUM *);
  265 (* STATIC *);
  266 (* EXTERN *);
  267 (* FOR *);
  268 (* IF *);
  269 (* REGISTER *);
  270 (* AUTO *);
  271 (* RETURN *);
  272 (* VOLATILE *);
  273 (* SWITCH *);
  274 (* TYPEDEF *);
  275 (* WHILE *);
  276 (* GOTO *);
  277 (* CHAR *);
  278 (* DOUBLE *);
  279 (* FLOAT *);
  280 (* INT *);
  281 (* SHORT *);
  282 (* LONG *);
  283 (* STRUCT *);
  284 (* UNION *);
  285 (* SIGNED *);
  286 (* UNSIGNED *);
  287 (* VOID *);
  288 (* ELLIPSIS *);
  289 (* COLON *);
  290 (* COMMA *);
  291 (* DOT *);
  292 (* LBRACE *);
  293 (* RBRACE *);
  294 (* LBRACKET *);
  295 (* RBRACKET *);
  296 (* LPAREN *);
  297 (* RPAREN *);
  298 (* NOT *);
  299 (* EQEQ *);
  300 (* NOTEQ *);
  301 (* EQ *);
  302 (* OREQ *);
  303 (* SHIFTLEQ *);
  304 (* SHIFTREQ *);
  305 (* MINUSEQ *);
  306 (* PLUSEQ *);
  307 (* STAREQ *);
  308 (* DIVEQ *);
  309 (* MODEQ *);
  310 (* BXOREQ *);
  311 (* AMPERSANDEQ *);
  312 (* SEMICOLON *);
  313 (* AMPERSAND *);
  314 (* ARROW *);
  315 (* AND *);
  316 (* OR *);
  317 (* MINUS *);
  318 (* DIV *);
  319 (* MOD *);
  320 (* PLUS *);
  321 (* MINUSMINUS *);
  322 (* QMARK *);
  323 (* PLUSPLUS *);
  324 (* STAR *);
  325 (* LT *);
  326 (* LTEQ *);
  327 (* GT *);
  328 (* GTEQ *);
  329 (* SHIFTL *);
  330 (* SHIFTR *);
  331 (* BXOR *);
  332 (* BOR *);
  333 (* BNOT *);
  334 (* ATTRIBUTE *);
  335 (* EXTENSION *);
  336 (* VA_LIST *);
  337 (* CDECL *);
  338 (* INLINE *);
  339 (* ASM *);
  340 (* RESTRICT *);
  341 (* BUILTIN_CONSTANT_P *);
  342 (* FUNNAME *);
  343 (* OFFSETOF *);
  344 (* SIZEOF *);
  345 (* TYPEOF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  346 (* NPK *);
  347 (* SYMBOL *);
  348 (* IDENTIFIER *);
  349 (* TYPEDEF_NAME *);
  350 (* STRING *);
  351 (* INTEGER *);
  352 (* CHARACTER *);
  353 (* FLOATCST *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\005\000\007\000\007\000\
\007\000\007\000\012\000\014\000\014\000\016\000\015\000\015\000\
\020\000\020\000\021\000\021\000\022\000\024\000\024\000\009\000\
\009\000\009\000\009\000\009\000\009\000\010\000\010\000\028\000\
\028\000\029\000\029\000\029\000\011\000\011\000\031\000\032\000\
\032\000\032\000\034\000\034\000\006\000\017\000\017\000\013\000\
\036\000\036\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\040\000\040\000\041\000\
\041\000\041\000\041\000\042\000\042\000\042\000\039\000\039\000\
\039\000\039\000\039\000\039\000\045\000\045\000\038\000\046\000\
\046\000\046\000\044\000\044\000\047\000\047\000\047\000\043\000\
\043\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\026\000\026\000\050\000\050\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\048\000\
\048\000\052\000\052\000\023\000\023\000\049\000\049\000\054\000\
\054\000\054\000\055\000\055\000\053\000\053\000\053\000\033\000\
\033\000\033\000\056\000\056\000\056\000\056\000\056\000\056\000\
\008\000\008\000\057\000\057\000\027\000\027\000\027\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\019\000\
\019\000\060\000\060\000\060\000\061\000\061\000\062\000\062\000\
\063\000\063\000\063\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\065\000\065\000\066\000\066\000\025\000\025\000\
\025\000\035\000\035\000\035\000\035\000\035\000\058\000\068\000\
\068\000\067\000\067\000\067\000\067\000\064\000\064\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\070\000\070\000\
\071\000\071\000\002\000\002\000\002\000\002\000\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\002\000\000\000\002\000\002\000\001\000\
\006\000\005\000\002\000\002\000\001\000\008\000\000\000\001\000\
\003\000\001\000\001\000\003\000\002\000\002\000\001\000\001\000\
\003\000\004\000\004\000\004\000\003\000\003\000\001\000\003\000\
\001\000\001\000\003\000\002\000\002\000\001\000\002\000\002\000\
\002\000\001\000\001\000\002\000\003\000\002\000\000\000\003\000\
\002\000\000\000\003\000\002\000\003\000\003\000\003\000\005\000\
\007\000\001\000\001\000\003\000\002\000\002\000\002\000\002\000\
\003\000\001\000\001\000\002\000\001\000\004\000\005\000\001\000\
\003\000\002\000\003\000\001\000\004\000\007\000\008\000\007\000\
\007\000\006\000\005\000\007\000\001\000\002\000\007\000\005\000\
\004\000\000\000\003\000\001\000\001\000\001\000\001\000\001\000\
\002\000\001\000\001\000\001\000\001\000\003\000\003\000\004\000\
\004\000\003\000\003\000\002\000\002\000\004\000\006\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\004\000\002\000\004\000\004\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\005\000\004\000\
\003\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
\001\000\001\000\003\000\001\000\001\000\003\000\003\000\003\000\
\001\000\002\000\004\000\006\000\003\000\001\000\000\000\001\000\
\001\000\002\000\003\000\003\000\003\000\004\000\004\000\003\000\
\002\000\003\000\003\000\002\000\003\000\001\000\001\000\001\000\
\002\000\001\000\002\000\003\000\001\000\001\000\002\000\001\000\
\001\000\001\000\003\000\002\000\001\000\003\000\003\000\002\000\
\001\000\001\000\002\000\001\000\001\000\002\000\004\000\002\000\
\001\000\003\000\002\000\003\000\002\000\003\000\002\000\003\000\
\002\000\001\000\002\000\002\000\003\000\002\000\002\000\003\000\
\001\000\004\000\002\000\005\000\004\000\004\000\001\000\003\000\
\001\000\002\000\003\000\008\000\003\000\004\000\003\000\002\000\
\004\000\002\000\001\000\000\000\002\000\000\000\002\000\002\000\
\000\000\001\000\001\000\001\000\001\000\001\000\002\000\003\000\
\001\000\006\000\001\000\001\000\001\000\003\000\001\000\001\000\
\004\000\004\000\009\000\008\000\004\000\001\000\001\000\002\000\
\001\000\003\000\002\000\002\000\002\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\002\001\000\000\006\001\005\001\004\001\
\000\000\000\000\000\000\012\001\000\000\000\000\013\001\000\000\
\031\001\000\000\000\000\000\000\000\000\241\000\000\000\013\000\
\000\000\000\000\000\000\000\000\003\001\030\001\000\000\000\000\
\094\000\093\000\095\000\032\001\000\000\000\000\011\001\242\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\001\000\003\000\000\000\011\000\000\000\000\000\200\000\
\201\000\006\000\000\000\000\000\012\000\024\000\016\000\000\000\
\000\000\000\000\248\000\000\000\192\000\210\000\209\000\194\000\
\000\000\000\000\000\000\000\000\000\000\000\000\212\000\239\000\
\000\000\233\000\000\000\213\000\226\000\046\000\250\000\000\000\
\000\000\027\001\028\001\029\001\000\000\240\000\000\000\000\000\
\000\000\247\000\000\000\243\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\101\000\000\000\000\000\069\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\058\000\
\059\000\000\000\100\000\099\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\000\
\193\000\000\000\000\000\211\000\195\000\000\000\000\000\000\000\
\000\000\000\000\227\000\000\000\230\000\000\000\000\000\214\000\
\216\000\000\000\045\000\245\000\000\000\000\000\000\000\022\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\074\000\000\000\097\000\070\000\000\000\000\000\000\000\
\063\000\064\000\000\000\000\000\000\000\000\000\000\000\061\000\
\098\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\148\000\155\000\157\000\158\000\151\000\150\000\152\000\153\000\
\154\000\159\000\156\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\109\000\000\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\149\000\048\000\049\000\068\000\025\000\186\000\000\000\000\000\
\000\000\191\000\029\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\020\000\000\000\165\000\000\001\255\000\000\000\
\000\000\000\000\000\000\222\000\224\000\196\000\000\000\218\000\
\220\000\208\000\251\000\000\000\000\000\000\000\229\000\232\000\
\000\000\000\000\000\000\249\000\246\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\000\000\073\000\075\000\000\000\
\000\000\053\000\054\000\000\000\000\000\000\000\000\000\060\000\
\000\000\055\000\000\000\065\000\000\000\000\000\000\000\044\000\
\000\000\103\000\102\000\000\000\000\000\000\000\000\000\051\000\
\000\000\106\000\000\000\000\000\000\000\161\000\000\000\000\000\
\000\000\107\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\026\000\000\000\
\000\000\000\000\040\000\041\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\000\000\000\000\000\
\215\000\207\000\000\000\000\000\007\001\238\000\237\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\001\000\000\000\000\077\000\000\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\124\000\110\000\000\000\000\000\
\104\000\000\000\105\000\000\000\000\000\000\000\030\000\010\000\
\000\000\000\000\189\000\000\000\000\000\166\000\167\000\000\000\
\000\000\203\000\236\000\187\000\000\000\000\000\000\000\000\000\
\000\000\010\001\000\000\000\000\021\001\024\001\000\000\017\001\
\018\001\000\000\000\000\000\000\086\000\000\000\000\000\091\000\
\000\000\000\000\000\000\083\000\180\000\181\000\179\000\000\000\
\184\000\000\000\000\000\163\000\000\000\009\000\039\000\037\000\
\000\000\173\000\168\000\000\000\000\000\008\001\000\000\000\000\
\000\000\000\000\000\000\026\001\244\000\000\000\000\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\182\000\
\183\000\111\000\000\000\000\000\000\000\253\000\032\000\014\000\
\000\000\000\000\078\000\084\000\080\000\081\000\000\000\057\000\
\000\000\000\000\087\000\000\000\000\000\000\000\079\000\000\000\
\000\000\172\000\000\000\020\001\000\000\089\000\019\001\088\000"

let yydgoto = "\003\000\
\017\000\036\000\018\000\019\000\020\000\044\000\058\000\096\000\
\097\000\030\001\192\001\022\000\138\000\139\000\061\000\024\000\
\025\000\083\000\062\000\063\000\064\000\065\000\137\001\066\000\
\156\000\140\000\031\001\207\001\208\001\141\000\194\001\032\001\
\176\001\218\000\026\000\142\000\143\000\144\000\145\000\146\000\
\106\000\107\000\147\000\078\001\168\001\007\002\148\000\101\001\
\037\001\016\001\017\001\102\001\138\001\139\001\140\001\089\001\
\052\001\053\001\084\000\041\001\042\001\171\000\085\000\186\000\
\028\000\246\001\029\000\149\001\187\000\158\001\159\001"

let yysindex = "\069\000\
\252\002\020\000\000\000\000\000\129\000\000\000\000\000\000\000\
\252\002\011\255\129\000\000\000\113\255\068\255\000\000\252\002\
\000\000\149\000\252\002\159\255\115\255\000\000\171\255\000\000\
\112\005\129\000\014\000\062\255\000\000\000\000\020\000\020\000\
\000\000\000\000\000\000\000\000\020\000\235\255\000\000\000\000\
\081\000\000\000\016\000\115\255\103\000\129\000\126\000\015\255\
\000\000\000\000\000\000\033\001\000\000\115\255\129\000\000\000\
\000\000\000\000\055\255\137\255\000\000\000\000\000\000\243\255\
\242\255\093\000\000\000\000\255\000\000\000\000\000\000\000\000\
\219\255\143\000\010\255\010\255\175\000\175\000\000\000\000\000\
\128\000\000\000\129\000\000\000\000\000\000\000\000\000\129\000\
\129\000\000\000\000\000\000\000\142\000\000\000\029\255\055\255\
\172\255\000\000\115\255\000\000\123\005\015\255\015\255\088\000\
\220\255\120\000\161\000\146\000\158\000\168\000\033\001\129\000\
\129\000\165\000\186\000\080\006\199\000\129\000\208\000\195\000\
\057\002\031\007\000\000\031\007\031\007\031\007\031\007\031\007\
\031\007\031\007\031\007\212\000\000\000\227\000\072\007\000\000\
\255\000\000\000\233\000\128\255\122\014\000\001\033\001\000\000\
\000\000\241\000\000\000\000\000\013\001\243\000\206\255\115\002\
\158\255\115\255\099\001\000\000\093\000\093\000\221\000\022\001\
\000\000\037\001\038\001\000\000\000\000\003\000\039\001\040\001\
\036\255\029\001\000\000\029\001\000\000\042\001\232\255\000\000\
\000\000\247\000\000\000\000\000\011\001\014\001\029\255\000\000\
\034\001\035\001\044\001\172\255\090\001\055\255\137\255\041\001\
\046\001\000\000\052\001\000\000\000\000\015\255\015\255\031\007\
\000\000\000\000\060\001\043\001\051\001\122\006\031\007\000\000\
\000\000\225\255\031\007\053\001\031\007\057\001\048\255\054\001\
\135\255\055\001\017\000\017\000\017\000\061\003\017\000\017\000\
\017\000\017\000\017\000\031\007\129\000\057\002\017\000\033\001\
\000\000\031\007\000\000\088\000\031\007\031\007\031\007\031\007\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\007\088\000\031\007\031\007\031\007\
\031\007\031\007\031\007\000\000\156\005\000\000\031\007\031\007\
\031\007\031\007\031\007\031\007\031\007\031\007\031\007\031\007\
\000\000\000\000\000\000\000\000\000\000\000\000\158\255\063\001\
\085\255\000\000\000\000\059\001\061\255\067\001\083\001\092\001\
\000\000\219\005\000\000\122\014\000\000\000\000\000\000\093\001\
\106\001\111\001\221\000\000\000\000\000\000\000\116\001\000\000\
\000\000\000\000\000\000\109\001\091\001\129\000\000\000\000\000\
\125\001\110\001\037\255\000\000\000\000\113\001\099\255\114\001\
\029\255\206\255\247\000\000\000\220\255\000\000\000\000\252\013\
\112\001\000\000\000\000\164\006\167\013\101\001\145\255\000\000\
\204\255\000\000\254\255\000\000\115\002\048\255\028\000\000\000\
\083\000\000\000\000\000\099\001\064\000\124\001\121\001\000\000\
\122\014\000\000\117\255\210\013\129\001\000\000\132\015\132\015\
\115\015\000\000\248\014\206\014\061\003\017\000\017\000\061\003\
\031\007\213\000\017\000\172\015\172\015\172\015\172\015\227\005\
\227\005\075\015\034\015\122\014\132\001\000\000\000\000\073\001\
\061\255\073\255\000\000\000\000\129\000\000\000\022\000\085\001\
\141\001\142\001\143\001\147\001\031\007\000\000\221\000\145\001\
\000\000\000\000\118\001\110\255\000\000\000\000\000\000\149\001\
\158\001\096\001\067\000\107\001\166\001\161\001\167\001\198\001\
\000\000\169\001\182\001\000\000\031\007\000\000\038\014\205\006\
\031\007\164\006\033\001\187\001\033\001\185\001\035\000\215\001\
\083\000\031\007\080\005\017\000\000\000\000\000\165\001\038\006\
\000\000\031\007\000\000\164\014\031\007\129\000\000\000\000\000\
\202\001\129\000\000\000\214\001\099\001\000\000\000\000\227\001\
\122\014\000\000\000\000\000\000\031\007\230\001\160\000\231\001\
\129\000\000\000\229\001\172\001\000\000\000\000\178\001\000\000\
\000\000\129\000\031\007\073\000\000\000\033\001\234\001\000\000\
\246\006\015\002\246\000\000\000\000\000\000\000\000\000\079\000\
\000\000\245\001\246\001\000\000\164\014\000\000\000\000\000\000\
\005\006\000\000\000\000\122\014\031\007\000\000\160\000\110\255\
\088\000\129\000\000\002\000\000\000\000\080\014\237\001\000\000\
\033\001\033\001\253\001\033\001\031\007\006\002\003\002\000\000\
\000\000\000\000\099\001\122\014\122\014\000\000\000\000\000\000\
\001\002\228\001\000\000\000\000\000\000\000\000\033\001\000\000\
\248\000\033\001\000\000\004\002\027\002\028\002\000\000\033\001\
\246\000\000\000\031\002\000\000\246\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\235\000\000\000\000\000\000\000\147\005\000\000\000\000\000\000\
\235\000\000\000\247\004\000\000\239\255\000\000\000\000\235\000\
\000\000\000\000\235\000\000\000\018\002\000\000\000\000\000\000\
\000\000\174\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\002\000\000\147\005\000\000\000\000\
\000\000\000\000\000\000\015\005\000\000\000\000\025\255\000\000\
\000\000\000\000\000\000\202\004\000\000\000\000\000\000\019\002\
\237\255\155\255\000\000\000\000\000\000\000\000\000\000\000\000\
\236\002\013\003\000\000\000\000\000\000\069\003\000\000\000\000\
\000\000\000\000\017\005\000\000\000\000\000\000\000\000\147\005\
\147\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\107\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\137\007\000\000\035\002\035\255\000\000\000\000\147\005\147\005\
\147\005\000\000\000\000\000\000\000\000\147\005\000\000\000\000\
\147\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\124\013\000\000\000\000\000\000\103\001\000\000\193\255\000\000\
\000\000\000\000\000\000\000\000\000\000\041\255\148\005\038\002\
\147\005\000\000\000\000\000\000\155\255\155\255\000\000\098\003\
\000\000\154\003\183\003\000\000\000\000\239\003\012\004\068\004\
\190\001\097\004\000\000\153\004\000\000\236\002\013\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\092\000\000\000\037\002\130\003\147\005\000\000\043\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\095\000\000\000\
\000\000\000\000\235\007\025\008\071\008\065\010\117\008\163\008\
\209\008\255\008\045\009\000\000\147\005\147\005\091\009\147\005\
\000\000\000\000\000\000\000\000\000\000\039\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\147\005\000\000\
\000\000\000\000\000\000\040\002\098\000\000\000\000\000\041\002\
\000\000\046\002\000\000\025\000\000\000\000\000\000\000\101\000\
\000\000\048\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\005\000\000\000\000\
\239\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\126\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\002\000\000\112\000\000\000\
\115\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\243\001\000\000\000\000\059\002\000\000\000\000\223\011\013\012\
\059\012\000\000\197\012\243\012\111\010\137\009\183\009\157\010\
\000\000\000\000\229\009\039\011\085\011\131\011\177\011\203\010\
\249\010\105\012\151\012\046\000\000\000\000\000\000\000\000\000\
\000\000\112\000\000\000\000\000\147\005\000\000\147\005\000\000\
\052\002\000\000\000\000\064\002\000\000\000\000\065\002\000\000\
\000\000\000\000\082\002\060\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\074\002\079\002\000\000\000\000\206\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\147\005\000\000\147\005\000\000\000\000\000\000\
\121\000\000\000\147\005\019\010\000\000\000\000\000\000\189\007\
\000\000\000\000\000\000\033\013\000\000\147\005\000\000\000\000\
\000\000\039\005\000\000\000\000\046\002\000\000\000\000\086\002\
\172\000\000\000\000\000\000\000\000\000\223\255\070\002\218\255\
\187\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\147\005\000\000\000\000\000\000\147\005\000\000\000\000\
\000\000\224\001\090\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\013\000\000\000\000\000\000\
\000\000\000\000\000\000\004\001\000\000\000\000\070\002\000\000\
\000\000\147\005\000\000\000\000\000\000\000\000\000\000\000\000\
\147\005\147\005\000\000\147\005\000\000\000\000\000\000\000\000\
\000\000\000\000\046\002\203\000\010\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\147\005\000\000\
\000\000\193\255\000\000\000\000\000\000\000\000\000\000\193\255\
\090\002\000\000\000\000\000\000\090\002\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\010\001\058\000\000\000\000\000\255\255\000\000\247\255\
\251\255\012\255\019\255\253\255\002\000\018\000\000\000\000\000\
\231\255\106\255\190\255\189\002\000\000\000\000\231\002\205\255\
\126\001\187\255\181\254\140\001\000\000\220\000\000\000\000\000\
\081\255\040\255\000\000\118\255\156\255\000\000\000\000\023\000\
\203\255\000\000\215\255\143\254\219\001\200\254\194\000\000\000\
\197\254\000\000\000\000\207\001\103\254\196\001\000\000\226\254\
\255\001\000\000\208\001\239\254\000\000\221\255\000\000\098\255\
\104\255\156\001\196\255\000\000\000\000\248\001\191\001"

let yytablesize = 4342
let yytable = "\021\000\
\086\000\040\000\149\000\021\000\019\001\158\000\108\000\021\000\
\170\000\172\000\203\000\059\000\094\001\095\001\021\000\060\000\
\054\001\021\000\023\000\030\000\101\000\053\000\041\000\027\000\
\062\001\144\001\023\000\059\001\045\000\150\000\184\000\027\000\
\181\001\023\000\125\001\159\000\023\000\195\000\027\000\088\001\
\173\000\027\000\100\000\242\001\099\000\169\000\210\000\103\000\
\193\000\194\000\043\000\217\000\104\000\151\000\223\001\224\001\
\177\001\179\000\047\000\195\001\108\000\108\000\047\000\196\000\
\047\000\047\000\042\000\076\000\076\000\001\000\002\000\088\000\
\050\001\049\000\185\000\076\000\051\000\151\001\185\000\089\000\
\185\000\185\000\025\001\047\000\180\000\085\001\021\000\086\001\
\157\000\190\000\188\000\160\000\047\000\191\000\054\000\101\000\
\158\000\158\000\085\001\177\001\129\001\056\000\057\000\234\001\
\055\000\181\000\182\000\048\000\105\000\132\001\085\001\003\002\
\129\001\028\002\051\001\055\000\047\000\047\000\234\000\215\000\
\185\000\046\000\216\000\127\001\181\001\202\001\024\001\101\000\
\055\000\204\000\205\000\096\001\185\000\185\000\055\001\212\000\
\056\001\079\001\154\001\191\001\022\001\081\001\205\001\083\001\
\070\001\071\001\056\000\057\000\050\000\054\000\234\000\029\001\
\056\000\057\000\054\000\185\001\108\000\108\000\093\001\004\000\
\217\000\234\000\161\001\101\000\056\000\057\000\092\000\099\001\
\234\000\098\001\006\000\007\000\162\001\008\000\152\000\091\001\
\153\000\055\000\234\000\157\000\157\000\092\000\055\000\235\000\
\066\001\171\001\106\001\029\001\001\001\026\001\155\001\114\001\
\156\001\157\001\052\000\037\000\050\000\050\000\027\001\001\001\
\047\000\056\000\057\000\101\000\101\000\087\001\056\000\057\000\
\238\001\152\000\001\001\189\000\240\001\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\037\000\037\000\067\000\215\000\215\000\050\000\037\000\216\000\
\038\002\131\001\005\000\038\000\040\002\234\000\012\000\039\000\
\011\001\015\000\161\000\152\000\172\001\023\001\011\001\162\000\
\163\000\028\001\054\001\011\001\011\001\101\000\011\001\165\000\
\034\000\057\001\234\000\011\001\011\001\011\001\011\001\011\001\
\011\001\011\001\011\001\011\001\011\001\011\001\019\000\175\001\
\047\000\033\000\093\000\130\001\154\000\029\001\034\000\004\000\
\080\001\047\000\046\001\163\001\101\000\047\000\155\000\234\000\
\047\001\017\002\006\000\007\000\019\000\008\000\173\001\033\000\
\090\000\091\000\033\000\033\000\034\000\033\000\092\000\034\000\
\034\000\152\001\034\000\236\000\148\001\026\001\237\000\095\000\
\238\000\105\000\164\000\174\001\011\001\164\000\011\001\011\001\
\011\001\085\001\011\001\086\001\234\000\087\000\226\001\011\001\
\228\001\230\001\253\000\011\001\087\001\149\000\145\000\145\000\
\164\000\004\001\145\000\006\001\145\000\219\000\145\000\220\000\
\221\000\222\000\223\000\224\000\225\000\226\000\227\000\220\001\
\206\001\234\000\231\000\038\000\212\001\145\000\012\000\039\000\
\182\001\015\000\234\000\213\001\232\001\101\000\031\000\032\000\
\234\000\255\001\033\000\034\000\035\000\008\002\036\001\130\001\
\178\001\000\002\179\001\145\000\188\000\016\001\145\000\145\000\
\043\000\145\000\004\000\042\000\016\001\029\001\205\000\043\000\
\094\000\205\000\042\000\023\000\023\000\006\000\007\000\033\002\
\008\000\176\000\247\001\023\000\177\000\037\002\193\001\023\000\
\176\000\101\000\178\000\177\000\021\002\022\002\098\000\024\002\
\197\000\178\000\023\000\072\001\164\000\102\000\165\000\178\000\
\166\000\077\001\038\000\167\000\168\000\012\000\039\000\014\000\
\015\000\029\001\031\002\056\000\057\000\183\000\016\002\249\001\
\023\000\200\000\247\001\023\000\023\000\023\000\023\000\025\002\
\101\000\198\000\199\000\069\000\206\001\097\001\072\000\174\000\
\175\000\100\001\103\001\104\001\206\000\206\000\038\000\193\001\
\206\000\012\000\039\000\193\001\015\000\201\000\253\001\105\001\
\099\000\107\001\108\001\109\001\110\001\111\001\112\001\202\000\
\101\000\207\000\115\001\116\001\117\001\118\001\119\001\120\001\
\121\001\122\001\123\001\124\001\171\000\038\000\211\000\171\000\
\012\000\039\000\047\000\015\000\252\000\189\001\234\000\213\000\
\215\000\005\002\006\002\228\000\252\000\036\001\068\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\229\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\047\000\047\000\
\032\002\234\000\038\001\039\001\176\000\177\000\214\000\232\000\
\233\000\109\000\004\000\110\000\018\001\036\000\111\000\167\001\
\020\001\112\000\113\000\114\000\115\000\006\000\007\000\116\000\
\008\000\117\000\118\000\119\000\120\000\021\001\055\000\180\001\
\040\001\043\001\047\000\036\000\044\001\045\001\048\001\049\001\
\169\000\161\000\060\001\047\000\052\000\061\001\080\000\047\000\
\121\000\063\001\122\000\064\001\188\001\065\001\073\001\192\000\
\067\001\036\000\058\001\082\000\036\000\036\000\068\001\036\000\
\123\000\124\000\069\001\004\000\128\001\125\000\090\001\092\001\
\126\000\127\000\074\001\128\000\129\000\126\001\006\000\007\000\
\201\001\008\000\075\001\133\001\082\001\130\000\038\000\131\000\
\084\001\012\000\039\000\014\000\015\000\132\000\133\000\134\000\
\135\000\026\001\136\000\134\001\137\000\135\001\105\000\033\000\
\034\000\035\000\027\001\077\001\077\001\167\001\034\001\146\000\
\146\000\141\001\121\000\145\001\122\000\146\000\142\001\146\000\
\143\001\146\001\147\001\180\001\046\001\100\001\150\001\165\001\
\237\001\153\001\160\001\124\000\170\001\183\001\146\000\125\000\
\036\001\184\001\126\000\127\000\028\001\128\000\129\000\038\000\
\244\001\187\001\012\000\039\000\190\001\015\000\197\001\130\000\
\196\001\131\000\198\001\199\001\200\001\203\001\254\001\132\000\
\133\000\134\000\135\000\211\001\077\001\209\001\209\000\252\000\
\105\000\033\000\034\000\035\000\051\001\252\000\210\001\215\001\
\156\001\216\001\252\000\252\000\012\002\252\000\218\001\217\001\
\013\002\151\001\252\000\252\000\252\000\252\000\252\000\252\000\
\252\000\252\000\252\000\252\000\252\000\219\001\227\001\229\001\
\056\000\056\000\056\000\056\000\056\000\056\000\036\001\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\231\001\
\235\001\239\001\241\001\056\000\056\000\136\001\245\001\056\000\
\248\001\056\000\251\001\252\000\250\001\252\000\252\000\252\000\
\157\001\252\000\001\002\147\000\147\000\004\002\252\000\056\000\
\056\000\147\000\252\000\147\000\056\000\009\002\010\002\056\000\
\056\000\018\002\056\000\056\000\020\002\023\002\026\002\027\002\
\034\002\029\002\147\000\035\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\004\000\056\000\056\000\056\000\056\000\056\000\
\056\000\035\000\030\002\035\002\036\002\006\000\007\000\039\002\
\008\000\015\000\018\000\072\000\047\000\015\001\008\000\160\000\
\031\000\190\000\175\000\252\000\202\000\007\000\033\001\035\000\
\174\000\252\000\035\000\035\000\052\000\035\000\252\000\252\000\
\121\000\252\000\122\000\162\000\169\000\204\000\252\000\252\000\
\252\000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\
\252\000\124\000\023\001\009\001\004\000\125\000\188\000\025\001\
\126\000\127\000\170\000\128\000\129\000\254\000\090\000\006\000\
\007\000\035\001\008\000\015\002\225\001\130\000\038\000\131\000\
\236\001\012\000\039\000\243\001\015\000\132\000\133\000\134\000\
\135\000\204\001\014\002\214\001\209\000\252\001\105\000\033\000\
\034\000\035\000\121\000\000\000\122\000\000\000\000\000\252\000\
\000\000\252\000\252\000\252\000\000\000\252\000\000\000\000\000\
\000\000\000\000\252\000\124\000\000\000\000\000\252\000\125\000\
\000\000\000\000\126\000\127\000\000\000\128\000\129\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\
\038\000\131\000\000\000\012\000\039\000\000\000\015\000\132\000\
\133\000\134\000\135\000\000\000\000\000\000\000\209\000\010\001\
\105\000\033\000\034\000\035\000\000\000\010\001\000\000\000\000\
\000\000\000\000\010\001\010\001\000\000\010\001\000\000\000\000\
\000\000\000\000\010\001\010\001\010\001\010\001\010\001\010\001\
\010\001\010\001\010\001\010\001\010\001\197\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\197\000\197\000\000\000\197\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\006\000\007\000\000\000\008\000\197\000\197\000\198\000\000\000\
\000\000\197\000\000\000\197\000\197\000\000\000\000\000\000\000\
\000\000\198\000\198\000\010\001\198\000\010\001\010\001\010\001\
\000\000\010\001\000\000\197\000\000\000\000\000\010\001\000\000\
\000\000\000\000\010\001\000\000\000\000\198\000\198\000\197\000\
\000\000\000\000\198\000\009\000\198\000\198\000\000\000\000\000\
\000\000\197\000\000\000\000\000\197\000\197\000\000\000\197\000\
\000\000\000\000\000\000\000\000\198\000\000\000\217\000\197\000\
\197\000\010\000\011\000\000\000\012\000\013\000\014\000\015\000\
\198\000\217\000\217\000\000\000\217\000\016\000\000\000\000\000\
\000\000\000\000\198\000\000\000\000\000\198\000\198\000\236\000\
\198\000\000\000\237\000\235\000\238\000\217\000\217\000\000\000\
\198\000\198\000\217\000\000\000\217\000\217\000\235\000\235\000\
\000\000\235\000\000\000\000\000\000\000\000\000\253\000\000\000\
\000\000\000\000\001\001\002\001\217\000\004\001\000\000\006\001\
\007\001\000\000\235\000\235\000\000\000\000\000\000\000\235\000\
\217\000\235\000\235\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\217\000\000\000\000\000\217\000\217\000\000\000\
\217\000\235\000\000\000\223\000\000\000\000\000\000\000\000\000\
\217\000\217\000\022\000\022\000\000\000\235\000\223\000\223\000\
\000\000\223\000\022\000\000\000\000\000\000\000\022\000\235\000\
\000\000\000\000\235\000\235\000\000\000\235\000\000\000\000\000\
\225\000\022\000\223\000\223\000\000\000\235\000\235\000\223\000\
\000\000\223\000\223\000\225\000\225\000\000\000\225\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\223\000\022\000\022\000\022\000\022\000\000\000\225\000\
\225\000\000\000\000\000\000\000\225\000\223\000\225\000\225\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\223\000\
\000\000\000\000\223\000\223\000\000\000\223\000\225\000\000\000\
\199\000\000\000\000\000\000\000\000\000\223\000\223\000\000\000\
\000\000\000\000\225\000\199\000\199\000\000\000\199\000\000\000\
\000\000\000\000\000\000\000\000\225\000\000\000\000\000\225\000\
\225\000\000\000\225\000\000\000\000\000\219\000\000\000\199\000\
\199\000\000\000\225\000\225\000\199\000\000\000\199\000\199\000\
\219\000\219\000\000\000\219\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\199\000\000\000\
\000\000\000\000\000\000\000\000\219\000\219\000\000\000\000\000\
\000\000\219\000\199\000\219\000\219\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\199\000\000\000\000\000\199\000\
\199\000\000\000\199\000\219\000\000\000\221\000\000\000\000\000\
\000\000\000\000\199\000\199\000\000\000\000\000\000\000\219\000\
\221\000\221\000\000\000\221\000\000\000\000\000\000\000\000\000\
\000\000\219\000\000\000\000\000\219\000\219\000\000\000\219\000\
\000\000\000\000\228\000\000\000\221\000\221\000\000\000\219\000\
\219\000\221\000\000\000\221\000\221\000\228\000\228\000\000\000\
\228\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\221\000\000\000\000\000\000\000\000\000\
\000\000\228\000\228\000\000\000\000\000\000\000\228\000\221\000\
\228\000\228\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\221\000\000\000\000\000\221\000\221\000\000\000\221\000\
\228\000\000\000\231\000\000\000\000\000\000\000\000\000\221\000\
\221\000\000\000\000\000\000\000\228\000\231\000\231\000\000\000\
\231\000\000\000\000\000\000\000\000\000\000\000\228\000\000\000\
\000\000\228\000\228\000\000\000\228\000\047\000\000\000\000\000\
\000\000\231\000\231\000\000\000\228\000\228\000\231\000\000\000\
\231\000\231\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\047\000\047\000\
\231\000\000\000\000\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\231\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\231\000\000\000\
\000\000\231\000\231\000\023\000\231\000\008\000\000\000\000\000\
\000\000\047\000\000\000\000\000\231\000\231\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\000\000\
\251\000\023\000\000\000\000\000\000\000\000\000\047\000\000\000\
\251\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\023\000\
\000\000\000\000\023\000\023\000\023\000\023\000\000\000\000\000\
\000\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\047\000\047\000\050\000\000\000\000\000\047\000\000\000\
\047\000\047\000\000\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\047\000\000\000\038\000\000\000\000\000\000\000\000\000\047\000\
\000\000\004\000\000\000\047\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\007\000\047\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\047\000\047\000\047\000\000\000\026\001\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\068\000\
\233\001\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\068\000\047\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\047\000\000\000\000\000\038\000\000\000\000\000\
\012\000\039\000\000\000\015\000\000\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\000\000\000\000\022\000\000\000\007\000\
\000\000\000\000\000\000\000\000\113\001\000\000\000\000\080\000\
\022\000\000\000\000\000\121\000\000\000\122\000\000\000\000\000\
\081\000\000\000\080\000\022\000\082\000\000\000\000\000\000\000\
\000\000\000\000\000\000\192\000\124\000\000\000\000\000\082\000\
\125\000\000\000\000\000\126\000\127\000\000\000\128\000\129\000\
\000\000\022\000\047\000\000\000\022\000\022\000\022\000\022\000\
\130\000\000\000\131\000\047\000\000\000\000\000\000\000\047\000\
\132\000\133\000\134\000\135\000\000\000\000\000\000\000\209\000\
\000\000\105\000\033\000\034\000\035\000\136\001\034\001\000\000\
\000\000\000\000\121\000\000\000\122\000\236\000\000\000\000\000\
\237\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\124\000\000\000\000\000\000\000\125\000\
\000\000\000\000\126\000\127\000\253\000\128\000\129\000\000\001\
\001\001\002\001\003\001\004\001\000\000\006\001\007\001\130\000\
\011\002\131\000\000\000\000\000\121\000\000\000\122\000\132\000\
\133\000\134\000\135\000\000\000\000\000\000\000\209\000\000\000\
\105\000\033\000\034\000\035\000\000\000\124\000\000\000\000\000\
\000\000\125\000\000\000\000\000\126\000\127\000\000\000\128\000\
\129\000\034\001\000\000\000\000\000\000\121\000\000\000\122\000\
\000\000\130\000\000\000\131\000\000\000\000\000\000\000\000\000\
\000\000\132\000\133\000\134\000\135\000\000\000\000\000\000\000\
\209\000\000\000\105\000\033\000\034\000\035\000\127\000\000\000\
\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\000\000\000\131\000\000\000\000\000\121\000\
\000\000\122\000\132\000\133\000\134\000\135\000\000\000\000\000\
\000\000\209\000\000\000\105\000\033\000\034\000\035\000\208\000\
\124\000\000\000\000\000\000\000\125\000\000\000\000\000\126\000\
\127\000\000\000\128\000\129\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\000\000\000\131\000\000\000\
\000\000\121\000\000\000\122\000\132\000\133\000\134\000\135\000\
\000\000\000\000\000\000\209\000\000\000\105\000\033\000\034\000\
\035\000\076\001\124\000\000\000\000\000\000\000\125\000\000\000\
\000\000\126\000\127\000\000\000\128\000\129\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\
\131\000\000\000\000\000\121\000\000\000\122\000\132\000\133\000\
\134\000\135\000\000\000\000\000\000\000\209\000\000\000\105\000\
\033\000\034\000\035\000\166\001\124\000\000\000\000\000\000\000\
\125\000\000\000\000\000\126\000\127\000\000\000\128\000\129\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\130\000\000\000\131\000\000\000\121\000\222\001\122\000\000\000\
\132\000\133\000\134\000\135\000\000\000\000\000\000\000\209\000\
\000\000\105\000\033\000\034\000\035\000\124\000\000\000\000\000\
\000\000\125\000\000\000\000\000\126\000\127\000\000\000\128\000\
\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\130\000\000\000\131\000\000\000\121\000\002\002\122\000\
\000\000\132\000\133\000\134\000\135\000\000\000\000\000\000\000\
\209\000\000\000\105\000\033\000\034\000\035\000\124\000\000\000\
\000\000\000\000\125\000\000\000\000\000\126\000\127\000\000\000\
\128\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\000\000\000\131\000\000\000\121\000\000\000\
\122\000\000\000\132\000\133\000\134\000\135\000\000\000\000\000\
\000\000\209\000\000\000\105\000\033\000\034\000\035\000\124\000\
\000\000\000\000\000\000\125\000\000\000\000\000\126\000\127\000\
\000\000\128\000\129\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\000\000\000\131\000\000\000\230\000\
\000\000\122\000\000\000\132\000\133\000\134\000\135\000\000\000\
\000\000\000\000\209\000\000\000\105\000\033\000\034\000\035\000\
\124\000\000\000\000\000\000\000\125\000\000\000\000\000\126\000\
\127\000\000\000\128\000\129\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\000\000\000\131\000\000\000\
\000\000\000\000\000\000\000\000\132\000\133\000\134\000\135\000\
\000\000\000\000\000\000\209\000\000\000\105\000\033\000\034\000\
\035\000\096\000\096\000\096\000\000\000\096\000\096\000\096\000\
\096\000\096\000\000\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
\096\000\096\000\096\000\096\000\096\000\000\000\096\000\000\000\
\000\000\096\000\096\000\000\000\096\000\121\000\121\000\121\000\
\000\000\121\000\121\000\121\000\000\000\121\000\000\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\000\000\121\000\000\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\000\000\121\000\117\000\117\000\121\000\121\000\117\000\
\121\000\117\000\000\000\117\000\000\000\117\000\117\000\117\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\117\000\117\000\000\000\117\000\117\000\117\000\
\117\000\117\000\117\000\000\000\117\000\000\000\117\000\117\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\000\000\
\117\000\114\000\114\000\117\000\117\000\114\000\117\000\114\000\
\000\000\114\000\000\000\114\000\114\000\114\000\114\000\114\000\
\114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
\114\000\114\000\000\000\114\000\114\000\114\000\114\000\114\000\
\114\000\000\000\114\000\000\000\114\000\114\000\114\000\114\000\
\114\000\114\000\114\000\114\000\114\000\000\000\114\000\118\000\
\118\000\114\000\114\000\118\000\114\000\118\000\000\000\118\000\
\000\000\118\000\118\000\118\000\118\000\118\000\118\000\118\000\
\118\000\118\000\118\000\118\000\118\000\118\000\118\000\118\000\
\000\000\118\000\118\000\118\000\118\000\118\000\118\000\000\000\
\118\000\000\000\118\000\118\000\118\000\118\000\118\000\118\000\
\118\000\118\000\118\000\000\000\118\000\113\000\113\000\118\000\
\118\000\113\000\118\000\113\000\000\000\113\000\000\000\113\000\
\113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\113\000\000\000\113\000\
\113\000\113\000\113\000\113\000\113\000\000\000\113\000\000\000\
\113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
\113\000\000\000\113\000\112\000\112\000\113\000\113\000\112\000\
\113\000\112\000\000\000\112\000\000\000\112\000\112\000\112\000\
\112\000\112\000\112\000\112\000\112\000\112\000\112\000\112\000\
\112\000\112\000\112\000\112\000\000\000\112\000\112\000\112\000\
\112\000\112\000\112\000\000\000\112\000\000\000\112\000\112\000\
\112\000\112\000\112\000\112\000\112\000\112\000\112\000\000\000\
\112\000\115\000\115\000\112\000\112\000\115\000\112\000\115\000\
\000\000\115\000\000\000\115\000\115\000\115\000\115\000\115\000\
\115\000\115\000\115\000\115\000\115\000\115\000\115\000\115\000\
\115\000\115\000\000\000\115\000\115\000\115\000\115\000\115\000\
\115\000\000\000\115\000\000\000\115\000\115\000\115\000\115\000\
\115\000\115\000\115\000\115\000\115\000\000\000\115\000\116\000\
\116\000\115\000\115\000\116\000\115\000\116\000\000\000\116\000\
\000\000\116\000\116\000\116\000\116\000\116\000\116\000\116\000\
\116\000\116\000\116\000\116\000\116\000\116\000\116\000\116\000\
\000\000\116\000\116\000\116\000\116\000\116\000\116\000\000\000\
\116\000\000\000\116\000\116\000\116\000\116\000\116\000\116\000\
\116\000\116\000\116\000\000\000\116\000\122\000\122\000\116\000\
\116\000\122\000\116\000\122\000\000\000\122\000\000\000\122\000\
\122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\122\000\122\000\122\000\122\000\122\000\000\000\122\000\
\122\000\122\000\122\000\122\000\122\000\000\000\122\000\000\000\
\122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\000\000\122\000\120\000\120\000\122\000\122\000\120\000\
\122\000\120\000\000\000\120\000\000\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\000\000\120\000\120\000\120\000\
\120\000\120\000\120\000\000\000\120\000\000\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\000\000\
\120\000\126\000\126\000\120\000\120\000\126\000\120\000\126\000\
\000\000\126\000\000\000\126\000\126\000\126\000\126\000\126\000\
\126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
\126\000\126\000\000\000\126\000\126\000\126\000\126\000\126\000\
\126\000\000\000\126\000\000\000\126\000\126\000\126\000\126\000\
\126\000\126\000\126\000\126\000\126\000\000\000\126\000\127\000\
\127\000\126\000\126\000\127\000\126\000\127\000\000\000\127\000\
\000\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
\127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
\000\000\127\000\127\000\127\000\127\000\127\000\127\000\000\000\
\127\000\000\000\127\000\127\000\127\000\127\000\127\000\127\000\
\127\000\127\000\127\000\000\000\127\000\125\000\125\000\127\000\
\127\000\125\000\127\000\125\000\000\000\125\000\000\000\125\000\
\125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
\125\000\125\000\125\000\125\000\125\000\125\000\000\000\125\000\
\125\000\125\000\125\000\125\000\125\000\000\000\125\000\000\000\
\125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
\125\000\000\000\125\000\123\000\123\000\125\000\125\000\123\000\
\125\000\123\000\000\000\123\000\000\000\123\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
\123\000\123\000\123\000\123\000\000\000\123\000\123\000\123\000\
\123\000\123\000\123\000\000\000\123\000\000\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\123\000\123\000\000\000\
\123\000\119\000\119\000\123\000\123\000\119\000\123\000\119\000\
\000\000\119\000\000\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\000\000\119\000\119\000\119\000\000\000\000\000\
\119\000\000\000\119\000\000\000\000\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\000\000\119\000\129\000\
\129\000\119\000\119\000\129\000\119\000\129\000\000\000\129\000\
\000\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
\000\000\129\000\129\000\129\000\000\000\000\000\129\000\000\000\
\129\000\000\000\000\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\129\000\000\000\129\000\128\000\128\000\129\000\
\129\000\128\000\129\000\128\000\000\000\128\000\000\000\128\000\
\128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
\128\000\128\000\128\000\128\000\128\000\128\000\000\000\128\000\
\128\000\128\000\000\000\000\000\128\000\000\000\128\000\000\000\
\000\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
\128\000\000\000\128\000\130\000\130\000\128\000\128\000\130\000\
\128\000\130\000\000\000\130\000\000\000\130\000\130\000\130\000\
\130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
\130\000\130\000\130\000\130\000\000\000\130\000\130\000\000\000\
\000\000\000\000\000\000\000\000\130\000\000\000\000\000\130\000\
\130\000\130\000\130\000\130\000\130\000\130\000\130\000\000\000\
\130\000\131\000\131\000\130\000\130\000\131\000\130\000\131\000\
\000\000\131\000\000\000\131\000\131\000\131\000\131\000\131\000\
\131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
\131\000\131\000\000\000\131\000\131\000\000\000\000\000\000\000\
\000\000\000\000\131\000\000\000\000\000\131\000\131\000\131\000\
\131\000\131\000\131\000\131\000\131\000\000\000\131\000\134\000\
\134\000\131\000\131\000\134\000\131\000\134\000\000\000\134\000\
\000\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
\134\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
\000\000\134\000\134\000\000\000\000\000\000\000\000\000\000\000\
\134\000\000\000\000\000\134\000\134\000\134\000\134\000\000\000\
\000\000\134\000\134\000\000\000\134\000\135\000\135\000\134\000\
\134\000\135\000\134\000\135\000\000\000\135\000\000\000\135\000\
\135\000\135\000\135\000\135\000\135\000\135\000\135\000\135\000\
\135\000\135\000\135\000\135\000\135\000\135\000\000\000\135\000\
\135\000\000\000\000\000\000\000\000\000\000\000\135\000\000\000\
\000\000\135\000\135\000\135\000\135\000\000\000\000\000\135\000\
\135\000\000\000\135\000\132\000\132\000\135\000\135\000\132\000\
\135\000\132\000\000\000\132\000\000\000\132\000\132\000\132\000\
\132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
\132\000\132\000\132\000\132\000\000\000\132\000\132\000\000\000\
\000\000\000\000\000\000\000\000\132\000\000\000\000\000\132\000\
\132\000\132\000\132\000\000\000\000\000\132\000\132\000\000\000\
\132\000\133\000\133\000\132\000\132\000\133\000\132\000\133\000\
\000\000\133\000\000\000\133\000\133\000\133\000\133\000\133\000\
\133\000\133\000\133\000\133\000\133\000\133\000\133\000\133\000\
\133\000\133\000\000\000\133\000\133\000\000\000\000\000\000\000\
\000\000\000\000\133\000\000\000\000\000\133\000\133\000\133\000\
\133\000\000\000\000\000\133\000\133\000\000\000\133\000\136\000\
\136\000\133\000\133\000\136\000\133\000\136\000\000\000\136\000\
\000\000\136\000\136\000\136\000\136\000\136\000\136\000\136\000\
\136\000\136\000\136\000\136\000\136\000\136\000\136\000\136\000\
\000\000\136\000\136\000\000\000\000\000\000\000\000\000\000\000\
\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\136\000\136\000\000\000\136\000\137\000\137\000\136\000\
\136\000\137\000\136\000\137\000\000\000\137\000\000\000\137\000\
\137\000\137\000\137\000\137\000\137\000\137\000\137\000\137\000\
\137\000\137\000\137\000\137\000\137\000\137\000\000\000\137\000\
\137\000\000\000\000\000\000\000\000\000\000\000\137\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\000\
\137\000\000\000\137\000\138\000\138\000\137\000\137\000\138\000\
\137\000\138\000\000\000\138\000\000\000\000\000\000\000\138\000\
\138\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
\138\000\138\000\138\000\138\000\000\000\138\000\138\000\000\000\
\000\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\138\000\138\000\000\000\
\138\000\139\000\139\000\138\000\138\000\139\000\138\000\139\000\
\000\000\139\000\000\000\000\000\000\000\139\000\139\000\139\000\
\139\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
\139\000\000\000\000\000\139\000\139\000\000\000\000\000\000\000\
\000\000\000\000\139\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\139\000\139\000\000\000\139\000\140\000\
\140\000\139\000\139\000\140\000\139\000\140\000\000\000\140\000\
\000\000\000\000\000\000\140\000\140\000\140\000\140\000\140\000\
\140\000\140\000\140\000\140\000\140\000\140\000\140\000\000\000\
\000\000\140\000\140\000\000\000\000\000\000\000\000\000\000\000\
\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\140\000\000\000\140\000\141\000\141\000\140\000\
\140\000\141\000\140\000\141\000\000\000\141\000\000\000\000\000\
\000\000\141\000\141\000\141\000\141\000\141\000\141\000\141\000\
\141\000\141\000\141\000\141\000\141\000\000\000\000\000\141\000\
\141\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\141\000\142\000\142\000\141\000\141\000\142\000\
\141\000\142\000\000\000\142\000\000\000\000\000\000\000\142\000\
\142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
\142\000\142\000\142\000\000\000\000\000\000\000\142\000\000\000\
\000\000\000\000\000\000\000\000\142\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\142\000\144\000\144\000\142\000\142\000\144\000\142\000\144\000\
\000\000\144\000\000\000\000\000\000\000\144\000\144\000\144\000\
\144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\144\000\143\000\
\143\000\144\000\144\000\143\000\144\000\143\000\000\000\143\000\
\000\000\000\000\000\000\143\000\143\000\143\000\143\000\143\000\
\143\000\143\000\143\000\143\000\143\000\143\000\143\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\143\000\098\000\098\000\143\000\
\143\000\098\000\143\000\098\000\000\000\000\000\098\000\098\000\
\098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
\098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
\098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
\098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
\169\001\236\000\000\000\000\000\237\000\000\000\238\000\000\000\
\000\000\239\000\240\000\241\000\242\000\243\000\244\000\245\000\
\246\000\247\000\248\000\249\000\250\000\251\000\000\000\252\000\
\253\000\254\000\255\000\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\186\001\236\000\000\000\000\000\237\000\
\000\000\238\000\000\000\000\000\239\000\240\000\241\000\242\000\
\243\000\244\000\245\000\246\000\247\000\248\000\249\000\250\000\
\251\000\000\000\252\000\253\000\254\000\255\000\000\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\236\000\000\000\
\000\000\237\000\000\000\238\000\164\001\000\000\239\000\240\000\
\241\000\242\000\243\000\244\000\245\000\246\000\247\000\248\000\
\249\000\250\000\251\000\000\000\252\000\253\000\254\000\255\000\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\236\000\000\000\000\000\237\000\000\000\238\000\000\000\000\000\
\239\000\240\000\241\000\242\000\243\000\244\000\245\000\246\000\
\247\000\248\000\249\000\250\000\251\000\221\001\252\000\253\000\
\254\000\255\000\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\236\000\000\000\000\000\237\000\000\000\238\000\
\019\002\000\000\239\000\240\000\241\000\242\000\243\000\244\000\
\245\000\246\000\247\000\248\000\249\000\250\000\251\000\000\000\
\252\000\253\000\254\000\255\000\000\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\236\000\000\000\000\000\237\000\
\000\000\238\000\000\000\000\000\239\000\240\000\241\000\242\000\
\243\000\244\000\245\000\246\000\247\000\248\000\249\000\250\000\
\251\000\000\000\252\000\253\000\254\000\255\000\000\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\236\000\000\000\
\000\000\237\000\000\000\238\000\000\000\000\000\239\000\240\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\252\000\253\000\254\000\255\000\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\236\000\000\000\000\000\237\000\000\000\238\000\000\000\000\000\
\239\000\240\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\252\000\253\000\
\254\000\000\000\000\001\001\001\002\001\003\001\004\001\000\000\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\236\000\000\000\000\000\237\000\000\000\238\000\
\000\000\000\000\239\000\240\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\252\000\253\000\000\000\000\000\000\001\001\001\002\001\003\001\
\004\001\000\000\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\236\000\000\000\000\000\237\000\
\000\000\238\000\000\000\000\000\239\000\240\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\252\000\253\000\000\000\000\000\000\001\001\001\
\002\001\003\001\004\001\000\000\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\236\000\000\000\000\000\
\237\000\000\000\238\000\000\000\000\000\239\000\240\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\252\000\253\000\000\000\000\000\000\001\
\001\001\002\001\003\001\004\001\000\000\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\236\000\000\000\000\000\
\237\000\000\000\238\000\000\000\000\000\239\000\240\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\236\000\000\000\
\000\000\237\000\000\000\238\000\253\000\000\000\000\000\000\001\
\001\001\002\001\003\001\004\001\000\000\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\253\000\000\000\000\000\
\000\001\001\001\002\001\003\001\004\001\000\000\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\236\000\000\000\
\000\000\237\000\000\000\238\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\253\000\000\000\000\000\
\000\001\001\001\002\001\003\001\004\001\000\000\006\001\007\001\
\000\000\000\000\000\000\000\000\012\001\013\001"

let yycheck = "\001\000\
\026\000\005\000\054\000\005\000\143\000\066\000\048\000\009\000\
\075\000\076\000\111\000\021\000\229\000\230\000\016\000\021\000\
\169\000\019\000\001\000\000\000\046\000\020\000\005\000\001\000\
\183\000\043\001\009\000\178\000\011\000\055\000\002\001\009\000\
\092\001\016\000\023\001\036\001\019\000\104\000\016\000\215\000\
\076\000\019\000\046\000\197\001\046\000\036\001\116\000\033\001\
\102\000\103\000\040\001\121\000\038\001\059\000\168\001\169\001\
\087\001\083\000\034\001\135\001\102\000\103\000\038\001\105\000\
\040\001\041\001\009\000\033\001\034\001\001\000\002\000\010\001\
\037\001\016\000\034\001\041\001\019\000\041\001\038\001\018\001\
\040\001\041\001\152\000\016\001\088\000\038\001\088\000\040\001\
\066\000\099\000\096\000\092\001\068\001\099\000\040\001\121\000\
\157\000\158\000\038\001\130\001\040\001\092\001\093\001\179\001\
\068\001\088\000\089\000\040\001\094\001\029\001\038\001\225\001\
\040\001\011\002\079\001\068\001\092\001\093\001\034\001\121\000\
\092\001\009\001\121\000\039\001\184\001\143\001\152\000\153\000\
\068\001\112\000\113\000\232\000\092\001\093\001\170\000\118\000\
\172\000\207\000\040\001\128\001\150\000\211\000\033\001\213\000\
\198\000\199\000\092\001\093\001\000\000\040\001\034\001\153\000\
\092\001\093\001\040\001\039\001\198\000\199\000\228\000\002\001\
\230\000\034\001\065\001\189\000\092\001\093\001\041\001\237\000\
\034\001\236\000\013\001\014\001\067\001\016\001\038\001\041\001\
\040\001\068\001\034\001\157\000\158\000\056\001\068\001\056\001\
\190\000\041\001\253\000\189\000\034\001\032\001\092\001\005\001\
\094\001\095\001\036\001\002\000\004\001\005\001\041\001\045\001\
\008\001\092\001\093\001\229\000\230\000\215\000\092\001\093\001\
\190\001\038\001\056\001\040\001\194\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\031\000\032\000\056\001\229\000\230\000\037\001\037\000\230\000\
\033\002\029\001\000\000\078\001\037\002\034\001\081\001\082\001\
\002\001\084\001\024\001\038\001\041\001\040\001\008\001\029\001\
\030\001\092\001\147\001\013\001\014\001\023\001\016\001\024\001\
\034\001\026\001\034\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\034\001\085\001\
\080\001\056\001\040\001\029\001\034\001\023\001\056\001\002\001\
\056\001\089\001\024\001\069\001\054\001\093\001\045\001\034\001\
\030\001\250\001\013\001\014\001\056\001\016\001\041\001\078\001\
\031\000\032\000\081\001\082\001\078\001\084\001\037\000\081\001\
\082\001\059\001\084\001\035\001\054\001\032\001\038\001\040\001\
\040\001\094\001\034\001\085\001\078\001\037\001\080\001\081\001\
\082\001\038\001\084\001\040\001\034\001\056\001\171\001\089\001\
\173\001\039\001\058\001\093\001\086\001\129\001\033\001\034\001\
\056\001\065\001\037\001\067\001\039\001\122\000\041\001\124\000\
\125\000\126\000\127\000\128\000\129\000\130\000\131\000\165\001\
\148\001\034\001\135\000\078\001\034\001\056\001\081\001\082\001\
\041\001\084\001\034\001\041\001\178\001\135\001\091\001\092\001\
\034\001\041\001\095\001\096\001\097\001\039\001\155\000\129\001\
\038\001\222\001\040\001\078\001\130\001\034\001\081\001\082\001\
\034\001\084\001\002\001\034\001\041\001\135\001\034\001\041\001\
\056\001\037\001\041\001\033\001\034\001\013\001\014\001\026\002\
\016\001\034\001\207\001\041\001\034\001\032\002\133\001\045\001\
\041\001\179\001\034\001\041\001\001\002\002\002\056\001\004\002\
\041\001\041\001\056\001\200\000\022\001\040\001\024\001\040\001\
\026\001\206\000\078\001\029\001\030\001\081\001\082\001\083\001\
\084\001\179\001\023\002\092\001\093\001\040\001\249\001\209\001\
\078\001\040\001\247\001\081\001\082\001\083\001\084\001\005\002\
\218\001\033\001\034\001\021\001\248\001\234\000\024\001\025\001\
\026\001\238\000\239\000\240\000\040\001\034\001\078\001\190\001\
\037\001\081\001\082\001\194\001\084\001\056\001\218\001\252\000\
\218\001\254\000\255\000\000\001\001\001\002\001\003\001\056\001\
\250\001\040\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\034\001\078\001\040\001\037\001\
\081\001\082\001\008\001\084\001\010\001\033\001\034\001\040\001\
\250\001\004\001\005\001\040\001\018\001\034\001\008\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\040\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\092\001\093\001\
\033\001\034\001\157\000\158\000\077\000\078\000\092\001\033\001\
\056\001\001\001\002\001\003\001\037\001\034\001\006\001\076\001\
\056\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\041\001\068\001\092\001\
\092\001\036\001\080\001\056\001\024\001\024\001\024\001\024\001\
\036\001\024\001\056\001\089\001\036\001\056\001\080\001\093\001\
\040\001\040\001\042\001\041\001\113\001\034\001\019\001\089\001\
\040\001\078\001\092\001\093\001\081\001\082\001\041\001\084\001\
\056\001\057\001\039\001\002\001\034\001\061\001\041\001\041\001\
\064\001\065\001\056\001\067\001\068\001\039\001\013\001\014\001\
\141\001\016\001\056\001\041\001\056\001\077\001\078\001\079\001\
\056\001\081\001\082\001\083\001\084\001\085\001\086\001\087\001\
\088\001\032\001\090\001\041\001\092\001\034\001\094\001\095\001\
\096\001\097\001\041\001\168\001\169\001\170\001\036\001\033\001\
\034\001\045\001\040\001\024\001\042\001\039\001\037\001\041\001\
\034\001\037\001\056\001\184\001\024\001\186\001\041\001\040\001\
\189\001\041\001\041\001\057\001\056\001\034\001\056\001\061\001\
\197\001\041\001\064\001\065\001\092\001\067\001\068\001\078\001\
\205\001\041\001\081\001\082\001\041\001\084\001\034\001\077\001\
\092\001\079\001\037\001\037\001\034\001\037\001\219\001\085\001\
\086\001\087\001\088\001\092\001\225\001\041\001\092\001\002\001\
\094\001\095\001\096\001\097\001\079\001\008\001\041\001\034\001\
\094\001\041\001\013\001\014\001\241\001\016\001\009\001\041\001\
\245\001\041\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\040\001\036\001\039\001\
\001\001\002\001\003\001\004\001\005\001\006\001\011\002\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\041\001\
\092\001\056\001\045\001\036\001\037\001\035\001\033\001\040\001\
\034\001\042\001\095\001\078\001\040\001\080\001\081\001\082\001\
\095\001\084\001\041\001\033\001\034\001\007\001\089\001\056\001\
\057\001\039\001\093\001\041\001\061\001\041\001\041\001\064\001\
\065\001\034\001\067\001\068\001\056\001\041\001\033\001\037\001\
\037\001\041\001\056\001\034\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\002\001\092\001\093\001\094\001\095\001\096\001\
\097\001\056\001\095\001\041\001\041\001\013\001\014\001\041\001\
\016\001\056\001\056\001\041\001\039\001\041\001\036\001\041\001\
\041\001\041\001\037\001\002\001\037\001\036\001\154\000\078\001\
\037\001\008\001\081\001\082\001\036\001\084\001\013\001\014\001\
\040\001\016\001\042\001\041\001\037\001\037\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\057\001\041\001\056\001\002\001\061\001\037\001\041\001\
\064\001\065\001\037\001\067\001\068\001\056\001\037\001\013\001\
\014\001\155\000\016\001\248\001\170\001\077\001\078\001\079\001\
\186\001\081\001\082\001\200\001\084\001\085\001\086\001\087\001\
\088\001\147\001\247\001\156\001\092\001\215\001\094\001\095\001\
\096\001\097\001\040\001\255\255\042\001\255\255\255\255\078\001\
\255\255\080\001\081\001\082\001\255\255\084\001\255\255\255\255\
\255\255\255\255\089\001\057\001\255\255\255\255\093\001\061\001\
\255\255\255\255\064\001\065\001\255\255\067\001\068\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\077\001\
\078\001\079\001\255\255\081\001\082\001\255\255\084\001\085\001\
\086\001\087\001\088\001\255\255\255\255\255\255\092\001\002\001\
\094\001\095\001\096\001\097\001\255\255\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\016\001\255\255\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\013\001\014\001\255\255\016\001\255\255\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\014\001\255\255\016\001\033\001\034\001\002\001\255\255\
\255\255\038\001\255\255\040\001\041\001\255\255\255\255\255\255\
\255\255\013\001\014\001\078\001\016\001\080\001\081\001\082\001\
\255\255\084\001\255\255\056\001\255\255\255\255\089\001\255\255\
\255\255\255\255\093\001\255\255\255\255\033\001\034\001\068\001\
\255\255\255\255\038\001\056\001\040\001\041\001\255\255\255\255\
\255\255\078\001\255\255\255\255\081\001\082\001\255\255\084\001\
\255\255\255\255\255\255\255\255\056\001\255\255\002\001\092\001\
\093\001\078\001\079\001\255\255\081\001\082\001\083\001\084\001\
\068\001\013\001\014\001\255\255\016\001\090\001\255\255\255\255\
\255\255\255\255\078\001\255\255\255\255\081\001\082\001\035\001\
\084\001\255\255\038\001\002\001\040\001\033\001\034\001\255\255\
\092\001\093\001\038\001\255\255\040\001\041\001\013\001\014\001\
\255\255\016\001\255\255\255\255\255\255\255\255\058\001\255\255\
\255\255\255\255\062\001\063\001\056\001\065\001\255\255\067\001\
\068\001\255\255\033\001\034\001\255\255\255\255\255\255\038\001\
\068\001\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\078\001\255\255\255\255\081\001\082\001\255\255\
\084\001\056\001\255\255\002\001\255\255\255\255\255\255\255\255\
\092\001\093\001\033\001\034\001\255\255\068\001\013\001\014\001\
\255\255\016\001\041\001\255\255\255\255\255\255\045\001\078\001\
\255\255\255\255\081\001\082\001\255\255\084\001\255\255\255\255\
\002\001\056\001\033\001\034\001\255\255\092\001\093\001\038\001\
\255\255\040\001\041\001\013\001\014\001\255\255\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\078\001\
\255\255\056\001\081\001\082\001\083\001\084\001\255\255\033\001\
\034\001\255\255\255\255\255\255\038\001\068\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\078\001\
\255\255\255\255\081\001\082\001\255\255\084\001\056\001\255\255\
\002\001\255\255\255\255\255\255\255\255\092\001\093\001\255\255\
\255\255\255\255\068\001\013\001\014\001\255\255\016\001\255\255\
\255\255\255\255\255\255\255\255\078\001\255\255\255\255\081\001\
\082\001\255\255\084\001\255\255\255\255\002\001\255\255\033\001\
\034\001\255\255\092\001\093\001\038\001\255\255\040\001\041\001\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\056\001\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\255\255\255\255\
\255\255\038\001\068\001\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\078\001\255\255\255\255\081\001\
\082\001\255\255\084\001\056\001\255\255\002\001\255\255\255\255\
\255\255\255\255\092\001\093\001\255\255\255\255\255\255\068\001\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\078\001\255\255\255\255\081\001\082\001\255\255\084\001\
\255\255\255\255\002\001\255\255\033\001\034\001\255\255\092\001\
\093\001\038\001\255\255\040\001\041\001\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\056\001\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\255\255\255\255\255\255\038\001\068\001\
\040\001\041\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\078\001\255\255\255\255\081\001\082\001\255\255\084\001\
\056\001\255\255\002\001\255\255\255\255\255\255\255\255\092\001\
\093\001\255\255\255\255\255\255\068\001\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\255\255\255\255\078\001\255\255\
\255\255\081\001\082\001\255\255\084\001\008\001\255\255\255\255\
\255\255\033\001\034\001\255\255\092\001\093\001\038\001\255\255\
\040\001\041\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\033\001\034\001\
\056\001\255\255\255\255\038\001\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\068\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\056\001\078\001\255\255\
\255\255\081\001\082\001\034\001\084\001\036\001\255\255\255\255\
\255\255\068\001\255\255\255\255\092\001\093\001\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\080\001\008\001\255\255\
\010\001\056\001\255\255\255\255\255\255\255\255\089\001\255\255\
\018\001\092\001\093\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\008\001\078\001\
\255\255\255\255\081\001\082\001\083\001\084\001\255\255\255\255\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\008\001\255\255\
\255\255\033\001\034\001\037\001\255\255\255\255\038\001\255\255\
\040\001\041\001\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\080\001\255\255\
\056\001\255\255\036\001\255\255\255\255\255\255\255\255\089\001\
\255\255\002\001\255\255\093\001\068\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\014\001\080\001\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\089\001\
\255\255\255\255\255\255\093\001\092\001\093\001\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\080\001\008\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\089\001\
\255\255\255\255\008\001\093\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\008\001\255\255\255\255\078\001\255\255\255\255\
\081\001\082\001\255\255\084\001\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\034\001\255\255\036\001\
\255\255\255\255\255\255\255\255\033\001\255\255\255\255\080\001\
\045\001\255\255\255\255\040\001\255\255\042\001\255\255\255\255\
\089\001\255\255\080\001\056\001\093\001\255\255\255\255\255\255\
\255\255\255\255\255\255\089\001\057\001\255\255\255\255\093\001\
\061\001\255\255\255\255\064\001\065\001\255\255\067\001\068\001\
\255\255\078\001\080\001\255\255\081\001\082\001\083\001\084\001\
\077\001\255\255\079\001\089\001\255\255\255\255\255\255\093\001\
\085\001\086\001\087\001\088\001\255\255\255\255\255\255\092\001\
\255\255\094\001\095\001\096\001\097\001\035\001\036\001\255\255\
\255\255\255\255\040\001\255\255\042\001\035\001\255\255\255\255\
\038\001\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\255\255\255\255\255\255\061\001\
\255\255\255\255\064\001\065\001\058\001\067\001\068\001\061\001\
\062\001\063\001\064\001\065\001\255\255\067\001\068\001\077\001\
\036\001\079\001\255\255\255\255\040\001\255\255\042\001\085\001\
\086\001\087\001\088\001\255\255\255\255\255\255\092\001\255\255\
\094\001\095\001\096\001\097\001\255\255\057\001\255\255\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\255\255\067\001\
\068\001\036\001\255\255\255\255\255\255\040\001\255\255\042\001\
\255\255\077\001\255\255\079\001\255\255\255\255\255\255\255\255\
\255\255\085\001\086\001\087\001\088\001\255\255\255\255\255\255\
\092\001\255\255\094\001\095\001\096\001\097\001\065\001\255\255\
\067\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\077\001\255\255\079\001\255\255\255\255\040\001\
\255\255\042\001\085\001\086\001\087\001\088\001\255\255\255\255\
\255\255\092\001\255\255\094\001\095\001\096\001\097\001\056\001\
\057\001\255\255\255\255\255\255\061\001\255\255\255\255\064\001\
\065\001\255\255\067\001\068\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\077\001\255\255\079\001\255\255\
\255\255\040\001\255\255\042\001\085\001\086\001\087\001\088\001\
\255\255\255\255\255\255\092\001\255\255\094\001\095\001\096\001\
\097\001\056\001\057\001\255\255\255\255\255\255\061\001\255\255\
\255\255\064\001\065\001\255\255\067\001\068\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\077\001\255\255\
\079\001\255\255\255\255\040\001\255\255\042\001\085\001\086\001\
\087\001\088\001\255\255\255\255\255\255\092\001\255\255\094\001\
\095\001\096\001\097\001\056\001\057\001\255\255\255\255\255\255\
\061\001\255\255\255\255\064\001\065\001\255\255\067\001\068\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\077\001\255\255\079\001\255\255\040\001\041\001\042\001\255\255\
\085\001\086\001\087\001\088\001\255\255\255\255\255\255\092\001\
\255\255\094\001\095\001\096\001\097\001\057\001\255\255\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\255\255\067\001\
\068\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\077\001\255\255\079\001\255\255\040\001\041\001\042\001\
\255\255\085\001\086\001\087\001\088\001\255\255\255\255\255\255\
\092\001\255\255\094\001\095\001\096\001\097\001\057\001\255\255\
\255\255\255\255\061\001\255\255\255\255\064\001\065\001\255\255\
\067\001\068\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\077\001\255\255\079\001\255\255\040\001\255\255\
\042\001\255\255\085\001\086\001\087\001\088\001\255\255\255\255\
\255\255\092\001\255\255\094\001\095\001\096\001\097\001\057\001\
\255\255\255\255\255\255\061\001\255\255\255\255\064\001\065\001\
\255\255\067\001\068\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\077\001\255\255\079\001\255\255\040\001\
\255\255\042\001\255\255\085\001\086\001\087\001\088\001\255\255\
\255\255\255\255\092\001\255\255\094\001\095\001\096\001\097\001\
\057\001\255\255\255\255\255\255\061\001\255\255\255\255\064\001\
\065\001\255\255\067\001\068\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\077\001\255\255\079\001\255\255\
\255\255\255\255\255\255\255\255\085\001\086\001\087\001\088\001\
\255\255\255\255\255\255\092\001\255\255\094\001\095\001\096\001\
\097\001\033\001\034\001\035\001\255\255\037\001\038\001\039\001\
\040\001\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\078\001\255\255\
\255\255\081\001\082\001\255\255\084\001\033\001\034\001\035\001\
\255\255\037\001\038\001\039\001\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\255\255\078\001\033\001\034\001\081\001\082\001\037\001\
\084\001\039\001\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\255\255\
\078\001\033\001\034\001\081\001\082\001\037\001\084\001\039\001\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\066\001\255\255\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\078\001\033\001\
\034\001\081\001\082\001\037\001\084\001\039\001\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\063\001\064\001\255\255\
\066\001\255\255\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\255\255\078\001\033\001\034\001\081\001\
\082\001\037\001\084\001\039\001\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\255\255\078\001\033\001\034\001\081\001\082\001\037\001\
\084\001\039\001\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\255\255\
\078\001\033\001\034\001\081\001\082\001\037\001\084\001\039\001\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\066\001\255\255\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\078\001\033\001\
\034\001\081\001\082\001\037\001\084\001\039\001\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\063\001\064\001\255\255\
\066\001\255\255\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\255\255\078\001\033\001\034\001\081\001\
\082\001\037\001\084\001\039\001\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\255\255\078\001\033\001\034\001\081\001\082\001\037\001\
\084\001\039\001\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\255\255\
\078\001\033\001\034\001\081\001\082\001\037\001\084\001\039\001\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\066\001\255\255\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\078\001\033\001\
\034\001\081\001\082\001\037\001\084\001\039\001\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\062\001\063\001\064\001\255\255\
\066\001\255\255\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\255\255\078\001\033\001\034\001\081\001\
\082\001\037\001\084\001\039\001\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\255\255\078\001\033\001\034\001\081\001\082\001\037\001\
\084\001\039\001\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\255\255\
\078\001\033\001\034\001\081\001\082\001\037\001\084\001\039\001\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\255\255\255\255\
\064\001\255\255\066\001\255\255\255\255\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\078\001\033\001\
\034\001\081\001\082\001\037\001\084\001\039\001\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\255\255\255\255\064\001\255\255\
\066\001\255\255\255\255\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\255\255\078\001\033\001\034\001\081\001\
\082\001\037\001\084\001\039\001\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\255\255\255\255\064\001\255\255\066\001\255\255\
\255\255\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\255\255\078\001\033\001\034\001\081\001\082\001\037\001\
\084\001\039\001\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\255\255\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\255\255\
\078\001\033\001\034\001\081\001\082\001\037\001\084\001\039\001\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\255\255\255\255\255\255\
\255\255\255\255\066\001\255\255\255\255\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\255\255\078\001\033\001\
\034\001\081\001\082\001\037\001\084\001\039\001\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\255\255\255\255\255\255\255\255\255\255\
\066\001\255\255\255\255\069\001\070\001\071\001\072\001\255\255\
\255\255\075\001\076\001\255\255\078\001\033\001\034\001\081\001\
\082\001\037\001\084\001\039\001\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\255\255\255\255\255\255\255\255\255\255\066\001\255\255\
\255\255\069\001\070\001\071\001\072\001\255\255\255\255\075\001\
\076\001\255\255\078\001\033\001\034\001\081\001\082\001\037\001\
\084\001\039\001\255\255\041\001\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\255\255\069\001\
\070\001\071\001\072\001\255\255\255\255\075\001\076\001\255\255\
\078\001\033\001\034\001\081\001\082\001\037\001\084\001\039\001\
\255\255\041\001\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\255\255\255\255\255\255\
\255\255\255\255\066\001\255\255\255\255\069\001\070\001\071\001\
\072\001\255\255\255\255\075\001\076\001\255\255\078\001\033\001\
\034\001\081\001\082\001\037\001\084\001\039\001\255\255\041\001\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\255\255\255\255\255\255\255\255\255\255\
\066\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\075\001\076\001\255\255\078\001\033\001\034\001\081\001\
\082\001\037\001\084\001\039\001\255\255\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\255\255\255\255\255\255\255\255\255\255\066\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\075\001\
\076\001\255\255\078\001\033\001\034\001\081\001\082\001\037\001\
\084\001\039\001\255\255\041\001\255\255\255\255\255\255\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\075\001\076\001\255\255\
\078\001\033\001\034\001\081\001\082\001\037\001\084\001\039\001\
\255\255\041\001\255\255\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\059\001\060\001\255\255\255\255\255\255\
\255\255\255\255\066\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\075\001\076\001\255\255\078\001\033\001\
\034\001\081\001\082\001\037\001\084\001\039\001\255\255\041\001\
\255\255\255\255\255\255\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\255\255\059\001\060\001\255\255\255\255\255\255\255\255\255\255\
\066\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\076\001\255\255\078\001\033\001\034\001\081\001\
\082\001\037\001\084\001\039\001\255\255\041\001\255\255\255\255\
\255\255\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\255\255\255\255\059\001\
\060\001\255\255\255\255\255\255\255\255\255\255\066\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\078\001\033\001\034\001\081\001\082\001\037\001\
\084\001\039\001\255\255\041\001\255\255\255\255\255\255\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\255\255\255\255\255\255\060\001\255\255\
\255\255\255\255\255\255\255\255\066\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\078\001\033\001\034\001\081\001\082\001\037\001\084\001\039\001\
\255\255\041\001\255\255\255\255\255\255\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\078\001\033\001\
\034\001\081\001\082\001\037\001\084\001\039\001\255\255\041\001\
\255\255\255\255\255\255\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\078\001\034\001\035\001\081\001\
\082\001\038\001\084\001\040\001\255\255\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\034\001\035\001\255\255\255\255\038\001\255\255\040\001\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\255\255\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\034\001\035\001\255\255\255\255\038\001\
\255\255\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\255\255\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\035\001\255\255\
\255\255\038\001\255\255\040\001\041\001\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\255\255\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\035\001\255\255\255\255\038\001\255\255\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\035\001\255\255\255\255\038\001\255\255\040\001\
\041\001\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\255\255\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\035\001\255\255\255\255\038\001\
\255\255\040\001\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\255\255\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\035\001\255\255\
\255\255\038\001\255\255\040\001\255\255\255\255\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\035\001\255\255\255\255\038\001\255\255\040\001\255\255\255\255\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\058\001\
\059\001\255\255\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\068\001\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\035\001\255\255\255\255\038\001\255\255\040\001\
\255\255\255\255\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\057\001\058\001\255\255\255\255\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\035\001\255\255\255\255\038\001\
\255\255\040\001\255\255\255\255\043\001\044\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\057\001\058\001\255\255\255\255\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\035\001\255\255\255\255\
\038\001\255\255\040\001\255\255\255\255\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\057\001\058\001\255\255\255\255\061\001\
\062\001\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\035\001\255\255\255\255\
\038\001\255\255\040\001\255\255\255\255\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\255\255\038\001\255\255\040\001\058\001\255\255\255\255\061\001\
\062\001\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\058\001\255\255\255\255\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\035\001\255\255\
\255\255\038\001\255\255\040\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\058\001\255\255\255\255\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\068\001\
\255\255\255\255\255\255\255\255\073\001\074\001"

let yynames_const = "\
  BREAK\000\
  CONST\000\
  CONTINUE\000\
  CASE\000\
  DEFAULT\000\
  DO\000\
  ELSE\000\
  ENUM\000\
  STATIC\000\
  EXTERN\000\
  FOR\000\
  IF\000\
  REGISTER\000\
  AUTO\000\
  RETURN\000\
  VOLATILE\000\
  SWITCH\000\
  TYPEDEF\000\
  WHILE\000\
  GOTO\000\
  CHAR\000\
  DOUBLE\000\
  FLOAT\000\
  INT\000\
  SHORT\000\
  LONG\000\
  STRUCT\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  VOID\000\
  ELLIPSIS\000\
  COLON\000\
  COMMA\000\
  DOT\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  LPAREN\000\
  RPAREN\000\
  NOT\000\
  EQEQ\000\
  NOTEQ\000\
  EQ\000\
  OREQ\000\
  SHIFTLEQ\000\
  SHIFTREQ\000\
  MINUSEQ\000\
  PLUSEQ\000\
  STAREQ\000\
  DIVEQ\000\
  MODEQ\000\
  BXOREQ\000\
  AMPERSANDEQ\000\
  SEMICOLON\000\
  AMPERSAND\000\
  ARROW\000\
  AND\000\
  OR\000\
  MINUS\000\
  DIV\000\
  MOD\000\
  PLUS\000\
  MINUSMINUS\000\
  QMARK\000\
  PLUSPLUS\000\
  STAR\000\
  LT\000\
  LTEQ\000\
  GT\000\
  GTEQ\000\
  SHIFTL\000\
  SHIFTR\000\
  BXOR\000\
  BOR\000\
  BNOT\000\
  ATTRIBUTE\000\
  EXTENSION\000\
  VA_LIST\000\
  CDECL\000\
  INLINE\000\
  ASM\000\
  RESTRICT\000\
  BUILTIN_CONSTANT_P\000\
  FUNNAME\000\
  OFFSETOF\000\
  SIZEOF\000\
  TYPEOF\000\
  EOF\000\
  "

let yynames_block = "\
  NPK\000\
  SYMBOL\000\
  IDENTIFIER\000\
  TYPEDEF_NAME\000\
  STRING\000\
  INTEGER\000\
  CHARACTER\000\
  FLOATCST\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'translation_unit) in
    Obj.repr(
# 242 "c2newspeak/parser.mly"
                                            ( (_1) )
# 1873 "c2newspeak/parser.ml"
               : Csyntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Csyntax.assertion) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'translation_unit) in
    Obj.repr(
# 246 "c2newspeak/parser.mly"
                                            ( (GlbUserSpec _1, get_loc ())::_2 )
# 1881 "c2newspeak/parser.ml"
               : 'translation_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'external_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'translation_unit) in
    Obj.repr(
# 247 "c2newspeak/parser.mly"
                                            ( _1@_2 )
# 1889 "c2newspeak/parser.ml"
               : 'translation_unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'translation_unit) in
    Obj.repr(
# 248 "c2newspeak/parser.mly"
                                            ( 
    Npkcontext.report_accept_warning "Parser.translation_unit" 
      "unnecessary semicolon" Npkcontext.DirtySyntax;
    _2 
  )
# 1900 "c2newspeak/parser.ml"
               : 'translation_unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 253 "c2newspeak/parser.mly"
                                            ( [] )
# 1906 "c2newspeak/parser.ml"
               : 'translation_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_specifiers) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'function_declarator) in
    Obj.repr(
# 258 "c2newspeak/parser.mly"
                                            ( (_1, _2) )
# 1914 "c2newspeak/parser.ml"
               : 'function_prologue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pointer) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_declarator) in
    Obj.repr(
# 263 "c2newspeak/parser.mly"
                                           ( 
    let (ptr, decl) = _2 in
      (ptr+_1, decl)
  )
# 1925 "c2newspeak/parser.ml"
               : 'function_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'direct_declarator) in
    Obj.repr(
# 267 "c2newspeak/parser.mly"
                                           ( _1 )
# 1932 "c2newspeak/parser.ml"
               : 'function_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'pointer) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'direct_declarator) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'identifier_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'old_parameter_declaration_list) in
    Obj.repr(
# 270 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_accept_warning "Parser.declarator"
      "deprecated style of function definition" Npkcontext.DirtySyntax;
	(_1, Function (_2, build_funparams _4 _6))
  )
# 1946 "c2newspeak/parser.ml"
               : 'function_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'direct_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'identifier_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_parameter_declaration_list) in
    Obj.repr(
# 277 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_accept_warning "Parser.declarator"
      "deprecated style of function definition" Npkcontext.DirtySyntax;
    (0, Function (_1, build_funparams _3 _5))
  )
# 1959 "c2newspeak/parser.ml"
               : 'function_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'function_prologue) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 286 "c2newspeak/parser.mly"
                                            ( (_1, _2) )
# 1967 "c2newspeak/parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_specifiers) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'init_declarator_list) in
    Obj.repr(
# 291 "c2newspeak/parser.mly"
                                            ( (_1, _2) )
# 1975 "c2newspeak/parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeof_declaration) in
    Obj.repr(
# 292 "c2newspeak/parser.mly"
                            ( _1 )
# 1982 "c2newspeak/parser.ml"
               : 'declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'type_qualifier_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'type_specifier) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'pointer) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'type_qualifier_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'ident_or_tname) in
    Obj.repr(
# 298 "c2newspeak/parser.mly"
                                   ( (_4, [( (_5, Variable (_8, get_loc ())), []) , None]))
# 1993 "c2newspeak/parser.ml"
               : 'typeof_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 301 "c2newspeak/parser.mly"
                                            ( (((0, Abstract), []), None)::[] )
# 1999 "c2newspeak/parser.ml"
               : 'init_declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_init_declarator_list) in
    Obj.repr(
# 302 "c2newspeak/parser.mly"
                                            ( _1 )
# 2006 "c2newspeak/parser.ml"
               : 'init_declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'init_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_init_declarator_list) in
    Obj.repr(
# 308 "c2newspeak/parser.mly"
                                            ( _1::_3 )
# 2014 "c2newspeak/parser.ml"
               : 'non_empty_init_declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init_declarator) in
    Obj.repr(
# 309 "c2newspeak/parser.mly"
                                            ( _1::[] )
# 2021 "c2newspeak/parser.ml"
               : 'non_empty_init_declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_declarator) in
    Obj.repr(
# 314 "c2newspeak/parser.mly"
                                            ( (_1, None) )
# 2028 "c2newspeak/parser.ml"
               : 'init_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 315 "c2newspeak/parser.mly"
                                            ( (_1, Some _3) )
# 2036 "c2newspeak/parser.ml"
               : 'init_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declarator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_list) in
    Obj.repr(
# 320 "c2newspeak/parser.mly"
                                            ( (_1, _2) )
# 2044 "c2newspeak/parser.ml"
               : 'attr_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pointer) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_declarator) in
    Obj.repr(
# 324 "c2newspeak/parser.mly"
                                           ( 
    let (ptr, decl) = _2 in
      (ptr+_1, decl)
  )
# 2055 "c2newspeak/parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'direct_declarator) in
    Obj.repr(
# 328 "c2newspeak/parser.mly"
                                           ( _1 )
# 2062 "c2newspeak/parser.ml"
               : 'declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident_or_tname) in
    Obj.repr(
# 332 "c2newspeak/parser.mly"
                                           ( (0, Variable (_1, get_loc ())) )
# 2069 "c2newspeak/parser.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declarator) in
    Obj.repr(
# 333 "c2newspeak/parser.mly"
                                           ( _2 )
# 2076 "c2newspeak/parser.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'direct_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_sequence) in
    Obj.repr(
# 335 "c2newspeak/parser.mly"
                                           ( (0, Array (_1, Some _3)) )
# 2084 "c2newspeak/parser.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'direct_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_qualifier_list) in
    Obj.repr(
# 337 "c2newspeak/parser.mly"
                                           ( (0, Array (_1, None)) )
# 2092 "c2newspeak/parser.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'direct_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'parameter_list) in
    Obj.repr(
# 339 "c2newspeak/parser.mly"
                                           ( (0, Function (_1, _3)) )
# 2100 "c2newspeak/parser.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'direct_declarator) in
    Obj.repr(
# 340 "c2newspeak/parser.mly"
                                           ( (0, Function (_1, [])) )
# 2107 "c2newspeak/parser.ml"
               : 'direct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'identifier_list) in
    Obj.repr(
# 344 "c2newspeak/parser.mly"
                                           ( _1::_3 )
# 2115 "c2newspeak/parser.ml"
               : 'identifier_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 345 "c2newspeak/parser.mly"
                                           ( _1::[] )
# 2122 "c2newspeak/parser.ml"
               : 'identifier_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'struct_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'struct_declarator_list) in
    Obj.repr(
# 350 "c2newspeak/parser.mly"
                                           ( _1::_3 )
# 2130 "c2newspeak/parser.ml"
               : 'struct_declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'struct_declarator) in
    Obj.repr(
# 351 "c2newspeak/parser.mly"
                                           ( _1::[] )
# 2137 "c2newspeak/parser.ml"
               : 'struct_declarator_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 355 "c2newspeak/parser.mly"
                                           ( (_1, None) )
# 2144 "c2newspeak/parser.ml"
               : 'struct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 356 "c2newspeak/parser.mly"
                                           ( (_1, Some _3) )
# 2152 "c2newspeak/parser.ml"
               : 'struct_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 357 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_accept_warning "Parser.struct_declarator"
      "anonymous field declaration in structure" Npkcontext.DirtySyntax;
    ((0, Abstract), Some _2) 
  )
# 2163 "c2newspeak/parser.ml"
               : 'struct_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'old_parameter_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'old_parameter_declaration_list) in
    Obj.repr(
# 366 "c2newspeak/parser.mly"
                                            ( _1@_2 )
# 2171 "c2newspeak/parser.ml"
               : 'old_parameter_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'old_parameter_declaration) in
    Obj.repr(
# 367 "c2newspeak/parser.mly"
                                            ( _1 )
# 2178 "c2newspeak/parser.ml"
               : 'old_parameter_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 371 "c2newspeak/parser.mly"
                                            ( 
    let (b, m) = _1 in
    let normalize_param ((m, attr), init) =
      match init with
	  None when attr = [] -> (b, m)
	| _ -> 
	    Npkcontext.report_error "Parser.old_parameter_declaration"
	      "parameter can not be initialized"
    in
      List.map normalize_param m
  )
# 2195 "c2newspeak/parser.ml"
               : 'old_parameter_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_specifiers) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'declarator) in
    Obj.repr(
# 386 "c2newspeak/parser.mly"
                                           ( (_1, _2) )
# 2203 "c2newspeak/parser.ml"
               : 'parameter_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_specifiers) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abstract_declarator) in
    Obj.repr(
# 388 "c2newspeak/parser.mly"
                                           ( (_1, _2) )
# 2211 "c2newspeak/parser.ml"
               : 'parameter_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration_specifiers) in
    Obj.repr(
# 389 "c2newspeak/parser.mly"
                                           ( (_1, (0, Abstract)) )
# 2218 "c2newspeak/parser.ml"
               : 'parameter_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration_specifiers) in
    Obj.repr(
# 393 "c2newspeak/parser.mly"
                                           ( (_1, (0, Abstract)) )
# 2225 "c2newspeak/parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration_specifiers) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'abstract_declarator) in
    Obj.repr(
# 395 "c2newspeak/parser.mly"
                                           ( (_1, _2) )
# 2233 "c2newspeak/parser.ml"
               : 'type_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'type_qualifier_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_specifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_qualifier_list) in
    Obj.repr(
# 402 "c2newspeak/parser.mly"
                                           ( _2 )
# 2242 "c2newspeak/parser.ml"
               : 'declaration_specifiers))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_qualifier) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_qualifier_list) in
    Obj.repr(
# 407 "c2newspeak/parser.mly"
                                           ( )
# 2250 "c2newspeak/parser.ml"
               : 'type_qualifier_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "c2newspeak/parser.mly"
                                           ( )
# 2256 "c2newspeak/parser.ml"
               : 'type_qualifier_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 412 "c2newspeak/parser.mly"
                                           ( _2 )
# 2263 "c2newspeak/parser.ml"
               : 'compound_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 416 "c2newspeak/parser.mly"
                                           ( _1@_2 )
# 2271 "c2newspeak/parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 417 "c2newspeak/parser.mly"
                                           ( [] )
# 2277 "c2newspeak/parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 421 "c2newspeak/parser.mly"
                                           ( (Label _1, get_loc ())::_3 )
# 2285 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 422 "c2newspeak/parser.mly"
                                           ( build_stmtdecl false false _1 )
# 2292 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 423 "c2newspeak/parser.mly"
                                           ( build_stmtdecl true false _2 )
# 2299 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 424 "c2newspeak/parser.mly"
                                           ( build_stmtdecl false true _2 )
# 2306 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 425 "c2newspeak/parser.mly"
                                           ( build_typedef _2 )
# 2313 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression_sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 427 "c2newspeak/parser.mly"
                                           (
    [If (normalize_bexp _3, _5, []), get_loc ()] 
  )
# 2323 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression_sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 431 "c2newspeak/parser.mly"
                                           ( 
    [If (normalize_bexp _3, _5, _7), get_loc ()] 
  )
# 2334 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'switch_stmt) in
    Obj.repr(
# 434 "c2newspeak/parser.mly"
                                           ( [CSwitch _1, get_loc ()] )
# 2341 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iteration_statement) in
    Obj.repr(
# 435 "c2newspeak/parser.mly"
                                           ( [_1, get_loc ()] )
# 2348 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_sequence) in
    Obj.repr(
# 436 "c2newspeak/parser.mly"
                                                    ( 
    let loc = get_loc () in
      (Exp (Set (RetVar, None, _2)), loc)::(Return, loc)::[]
  )
# 2358 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 440 "c2newspeak/parser.mly"
                                           ( [Return, get_loc ()] )
# 2364 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression_sequence) in
    Obj.repr(
# 441 "c2newspeak/parser.mly"
                                           ( [Exp _1, get_loc ()] )
# 2371 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 442 "c2newspeak/parser.mly"
                                           ( [Break, get_loc ()] )
# 2377 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 443 "c2newspeak/parser.mly"
                                           ( [Continue, get_loc ()] )
# 2383 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 444 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_accept_warning "Parser.statement" "goto statement"
      Npkcontext.ForwardGoto;
    [Goto _2, get_loc ()] 
  )
# 2394 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 449 "c2newspeak/parser.mly"
                                           ( [Block _1, get_loc ()] )
# 2401 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "c2newspeak/parser.mly"
                                           ( [] )
# 2407 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'asm) in
    Obj.repr(
# 451 "c2newspeak/parser.mly"
                                           ( [] )
# 2414 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Csyntax.assertion) in
    Obj.repr(
# 452 "c2newspeak/parser.mly"
                                           ( (UserSpec _1, get_loc ())::[] )
# 2421 "c2newspeak/parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'asm_statement_list) in
    Obj.repr(
# 456 "c2newspeak/parser.mly"
                                           ( report_asm _3 )
# 2428 "c2newspeak/parser.ml"
               : 'asm))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'asm_statement_list) in
    Obj.repr(
# 458 "c2newspeak/parser.mly"
                                           ( report_asm _4 )
# 2435 "c2newspeak/parser.ml"
               : 'asm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asm_statement) in
    Obj.repr(
# 462 "c2newspeak/parser.mly"
                                           ( _1::[] )
# 2442 "c2newspeak/parser.ml"
               : 'asm_statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asm_statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asm_statement_list) in
    Obj.repr(
# 463 "c2newspeak/parser.mly"
                                           ( _1::_3 )
# 2450 "c2newspeak/parser.ml"
               : 'asm_statement_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asm_statement_list) in
    Obj.repr(
# 464 "c2newspeak/parser.mly"
                                           ( _2 )
# 2457 "c2newspeak/parser.ml"
               : 'asm_statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asm_statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asm_statement_list) in
    Obj.repr(
# 465 "c2newspeak/parser.mly"
                                           ( _1::_3 )
# 2465 "c2newspeak/parser.ml"
               : 'asm_statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string_literal) in
    Obj.repr(
# 469 "c2newspeak/parser.mly"
                                           ( _1 )
# 2472 "c2newspeak/parser.ml"
               : 'asm_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'string_literal) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 470 "c2newspeak/parser.mly"
                                           ( _1 )
# 2480 "c2newspeak/parser.ml"
               : 'asm_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'ident_or_tname) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'string_literal) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 471 "c2newspeak/parser.mly"
                                                                           ( _2^" "^_4 )
# 2489 "c2newspeak/parser.ml"
               : 'asm_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'assignment_expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expression_statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'assignment_expression_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 480 "c2newspeak/parser.mly"
                                           ( For(_3, normalize_bexp _5, _8, _6) )
# 2499 "c2newspeak/parser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expression_statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'assignment_expression_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 484 "c2newspeak/parser.mly"
                                           ( 
	Npkcontext.report_warning "Parser.iteration_statement" 
	  "init statement expected";
	For([], normalize_bexp _4, _7, _5) 
      )
# 2512 "c2newspeak/parser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'assignment_expression_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expression_statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 491 "c2newspeak/parser.mly"
                                           ( 
	Npkcontext.report_warning "Parser.iteration_statement" 
	  "increment statement expected";
	For(_3, normalize_bexp _5, _7, []) 
      )
# 2525 "c2newspeak/parser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression_statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 497 "c2newspeak/parser.mly"
                                           ( 
	Npkcontext.report_warning "Parser.iteration_statement" 
	  "init statement expected";
	For([], normalize_bexp _4, _6, []) 
      )
# 2537 "c2newspeak/parser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression_sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 503 "c2newspeak/parser.mly"
                                           ( For ([], normalize_bexp _3, _5, [])
					   )
# 2546 "c2newspeak/parser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expression_sequence) in
    Obj.repr(
# 507 "c2newspeak/parser.mly"
                                           ( DoWhile (_2, normalize_bexp _5) )
# 2554 "c2newspeak/parser.ml"
               : 'iteration_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 511 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_warning "Parser.expression_statement" 
      "halting condition should be explicit";
    exp_of_int 1
  )
# 2564 "c2newspeak/parser.ml"
               : 'expression_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 516 "c2newspeak/parser.mly"
                                           ( _1 )
# 2571 "c2newspeak/parser.ml"
               : 'expression_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expression_sequence) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    Obj.repr(
# 522 "c2newspeak/parser.mly"
                                           ( 
    let (cases, default) = _6 in
      (* TODO: all bexp normalizations should be done after typing and 
	 before firstpass!!!
	 should remove normalize_bexp from csyntax!!!
      *)
      (_3, cases, default) 
  )
# 2586 "c2newspeak/parser.ml"
               : 'switch_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression_sequence) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'case_list) in
    Obj.repr(
# 534 "c2newspeak/parser.mly"
                                           ( 
    let (cases, default) = _5 in
      ((_2, _4, get_loc ())::cases, default)
  )
# 2598 "c2newspeak/parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'case_list) in
    Obj.repr(
# 538 "c2newspeak/parser.mly"
                                           ( 
    let (cases, _) = _4 in
      if cases <> [] then begin
	Npkcontext.report_accept_warning "Parser.case_list" 
	  "switch with default case in intermediary position" 
	  Npkcontext.DirtySyntax
      end;
      (cases, _3)
  )
# 2614 "c2newspeak/parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 547 "c2newspeak/parser.mly"
                                           ( ([], []) )
# 2620 "c2newspeak/parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression_list) in
    Obj.repr(
# 552 "c2newspeak/parser.mly"
                                           ( (Exp _1, get_loc ())::_3 )
# 2628 "c2newspeak/parser.ml"
               : 'assignment_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 553 "c2newspeak/parser.mly"
                                           ( (Exp _1, get_loc ())::[] )
# 2635 "c2newspeak/parser.ml"
               : 'assignment_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 557 "c2newspeak/parser.mly"
                                           ( Csyntax.char_cst_of_lexeme _1 )
# 2642 "c2newspeak/parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string option * string * char option * string option) in
    Obj.repr(
# 558 "c2newspeak/parser.mly"
                                           ( Csyntax.int_cst_of_lexeme _1 )
# 2649 "c2newspeak/parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * char option) in
    Obj.repr(
# 559 "c2newspeak/parser.mly"
                                           ( Csyntax.float_cst_of_lexeme _1 )
# 2656 "c2newspeak/parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 563 "c2newspeak/parser.mly"
                                           ( _1 )
# 2663 "c2newspeak/parser.ml"
               : 'string_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'string_literal) in
    Obj.repr(
# 564 "c2newspeak/parser.mly"
                                           ( _1^_2 )
# 2671 "c2newspeak/parser.ml"
               : 'string_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 568 "c2newspeak/parser.mly"
                                           ( Var _1 )
# 2678 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 569 "c2newspeak/parser.mly"
                                           ( Cst _1 )
# 2685 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'string_literal) in
    Obj.repr(
# 570 "c2newspeak/parser.mly"
                                           ( Str _1 )
# 2692 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 571 "c2newspeak/parser.mly"
                                           ( FunName )
# 2698 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_sequence) in
    Obj.repr(
# 572 "c2newspeak/parser.mly"
                                           ( _2 )
# 2705 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 573 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_accept_warning "Parser.relational_expression"
      "block within expression" Npkcontext.DirtySyntax;
    BlkExp _2
  )
# 2716 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_sequence) in
    Obj.repr(
# 579 "c2newspeak/parser.mly"
                                           ( Index (_1, _3) )
# 2724 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'argument_expression_list) in
    Obj.repr(
# 581 "c2newspeak/parser.mly"
                                           ( Call (_1, _3) )
# 2732 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident_or_tname) in
    Obj.repr(
# 582 "c2newspeak/parser.mly"
                                           ( Field (_1, _3) )
# 2740 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident_or_tname) in
    Obj.repr(
# 583 "c2newspeak/parser.mly"
                                           ( Field (Index (_1, exp_of_int 0),
						    _3) )
# 2749 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 585 "c2newspeak/parser.mly"
                                           ( OpExp (Plus, _1, true) )
# 2756 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 586 "c2newspeak/parser.mly"
                                           ( OpExp (Minus, _1, true) )
# 2763 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_sequence) in
    Obj.repr(
# 589 "c2newspeak/parser.mly"
                                           ( 
     Npkcontext.report_warning "Parser.assignment_expression"
       "__builtin_constant_p ignored, assuming value 0";
    exp_of_int 0
  )
# 2774 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 595 "c2newspeak/parser.mly"
                                           ( Offsetof (build_type_decl _3, _5) )
# 2782 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 596 "c2newspeak/parser.mly"
                                           ( OpExp (Plus, _2, false) )
# 2789 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 597 "c2newspeak/parser.mly"
                                           ( OpExp (Minus, _2, false) )
# 2796 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 598 "c2newspeak/parser.mly"
                                           ( AddrOf _2 )
# 2803 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 599 "c2newspeak/parser.mly"
                                           ( Index (_2, exp_of_int 0) )
# 2810 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 601 "c2newspeak/parser.mly"
                                           ( Unop (BNot, _2) )
# 2817 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 602 "c2newspeak/parser.mly"
                                           ( Unop (Not, _2) )
# 2824 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 603 "c2newspeak/parser.mly"
                                           ( Csyntax.neg _2 )
# 2831 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 604 "c2newspeak/parser.mly"
                                           ( _2 )
# 2838 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 605 "c2newspeak/parser.mly"
                                           ( SizeofE _2 )
# 2845 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_name) in
    Obj.repr(
# 607 "c2newspeak/parser.mly"
                                           ( Sizeof (build_type_decl _3) )
# 2852 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 608 "c2newspeak/parser.mly"
                                           ( _2 )
# 2859 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 610 "c2newspeak/parser.mly"
                                           ( Cast (_4, build_type_decl _2) )
# 2867 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'composite) in
    Obj.repr(
# 611 "c2newspeak/parser.mly"
                                           ( 
    let loc = get_loc () in
    let (blk, t) = build_type_blk loc _2 in
    let d = 
      { 
	t = t; is_static = false; is_extern = false; 
	initialization = Some (Sequence _4) 
      } 
    in
    let id = Temps.to_string (new_id ()) (Temps.Misc "parser") in
    let decl = (LocalDecl (id, VDecl d), loc) in
    let e = (Exp (Var id), loc) in
      Npkcontext.report_accept_warning "Parser.cast_expression" 
	"local composite creation" Npkcontext.DirtySyntax;
      BlkExp (blk@decl::e::[])
  )
# 2890 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 628 "c2newspeak/parser.mly"
                                           ( Binop (Mult, _1, _3) )
# 2898 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 629 "c2newspeak/parser.mly"
                                           ( Binop (Div, _1, _3) )
# 2906 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 630 "c2newspeak/parser.mly"
                                           ( Binop (Mod, _1, _3) )
# 2914 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 631 "c2newspeak/parser.mly"
                                           ( Binop (Plus, _1, _3) )
# 2922 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 632 "c2newspeak/parser.mly"
                                           ( Binop (Minus, _1, _3) )
# 2930 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 633 "c2newspeak/parser.mly"
                                           ( Binop (Shiftl, _1, _3) )
# 2938 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 634 "c2newspeak/parser.mly"
                                           ( Binop (Shiftr, _1, _3) )
# 2946 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 635 "c2newspeak/parser.mly"
                                           ( Binop (Gt, _1, _3) )
# 2954 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 636 "c2newspeak/parser.mly"
                                           ( Unop (Not, Binop (Gt, _3, _1)) )
# 2962 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 637 "c2newspeak/parser.mly"
                                           ( Binop (Gt, _3, _1) )
# 2970 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 638 "c2newspeak/parser.mly"
                                           ( Unop (Not, Binop (Gt, _1, _3)) )
# 2978 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 639 "c2newspeak/parser.mly"
                                           ( Binop (Eq, _1, _3) )
# 2986 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 640 "c2newspeak/parser.mly"
                                           ( Unop (Not, Binop (Eq, _1, _3)) )
# 2994 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 641 "c2newspeak/parser.mly"
                                           ( Binop (BAnd, _1, _3) )
# 3002 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 642 "c2newspeak/parser.mly"
                                           ( Binop (BXor, _1, _3) )
# 3010 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 643 "c2newspeak/parser.mly"
                                           ( Binop (BOr, _1, _3) )
# 3018 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 644 "c2newspeak/parser.mly"
                                           ( 
    IfExp (normalize_bexp _1, normalize_bexp _3, exp_of_int 0) 
  )
# 3028 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 647 "c2newspeak/parser.mly"
                                           ( 
    IfExp (normalize_bexp _1, exp_of_int 1, normalize_bexp _3) 
  )
# 3038 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expression_sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 651 "c2newspeak/parser.mly"
                                           (
	Npkcontext.report_strict_warning "Parser.expression"
	  "conditional expression";
	IfExp (normalize_bexp _1, _3, _5)
  )
# 3051 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 657 "c2newspeak/parser.mly"
                                                          (
    let e = normalize_bexp _1 in
    let loc = get_loc () in
    let t = Csyntax.Typeof e in
    let d = 
      {
	t = t; is_static = false; is_extern = false;
	initialization = Some (Data e)
      }
    in
    let id = Temps.to_string (new_id ()) (Temps.Misc "parser") in
    let decl = (LocalDecl (id, VDecl d), loc) in
    let e' = Var id in
      BlkExp( [ decl; ( Exp (IfExp(e', e', _4)), loc ) ] )
  )
# 3073 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assignment_operator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 674 "c2newspeak/parser.mly"
                                           ( Set (_1, _2, _3) )
# 3082 "c2newspeak/parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 678 "c2newspeak/parser.mly"
                                           ( _1 )
# 3089 "c2newspeak/parser.ml"
               : 'expression_sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression_sequence) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 679 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_accept_warning "Parser.expression"
      "comma in expression" Npkcontext.DirtySyntax;
    let loc = get_loc () in
      BlkExp ((Exp _1, loc)::(Exp _3, loc)::[])
  )
# 3102 "c2newspeak/parser.ml"
               : 'expression_sequence))
; (fun __caml_parser_env ->
    Obj.repr(
# 688 "c2newspeak/parser.mly"
                                           ( None )
# 3108 "c2newspeak/parser.ml"
               : 'assignment_operator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_op_operator) in
    Obj.repr(
# 689 "c2newspeak/parser.mly"
                                           ( Some _1 )
# 3115 "c2newspeak/parser.ml"
               : 'assignment_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 693 "c2newspeak/parser.mly"
                                           ( Plus )
# 3121 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 694 "c2newspeak/parser.mly"
                                           ( Minus )
# 3127 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 695 "c2newspeak/parser.mly"
                                           ( Mult )
# 3133 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 696 "c2newspeak/parser.mly"
                                           ( Div )
# 3139 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 697 "c2newspeak/parser.mly"
                                           ( Mod )
# 3145 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 698 "c2newspeak/parser.mly"
                                           ( BOr )
# 3151 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 699 "c2newspeak/parser.mly"
                                           ( BAnd )
# 3157 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 700 "c2newspeak/parser.mly"
                                           ( Shiftl )
# 3163 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 701 "c2newspeak/parser.mly"
                                           ( Shiftr )
# 3169 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 702 "c2newspeak/parser.mly"
                                           ( BXor )
# 3175 "c2newspeak/parser.ml"
               : 'assignment_op_operator))
; (fun __caml_parser_env ->
    Obj.repr(
# 706 "c2newspeak/parser.mly"
                                           ( [] )
# 3181 "c2newspeak/parser.ml"
               : 'argument_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_argument_expression_list) in
    Obj.repr(
# 707 "c2newspeak/parser.mly"
                                           ( _1 )
# 3188 "c2newspeak/parser.ml"
               : 'argument_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 711 "c2newspeak/parser.mly"
                                           ( _1::[] )
# 3195 "c2newspeak/parser.ml"
               : 'nonempty_argument_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_argument_expression_list) in
    Obj.repr(
# 713 "c2newspeak/parser.mly"
                                           ( _1::_3 )
# 3203 "c2newspeak/parser.ml"
               : 'nonempty_argument_expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 717 "c2newspeak/parser.mly"
                                           ( Data _1 )
# 3210 "c2newspeak/parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'composite) in
    Obj.repr(
# 718 "c2newspeak/parser.mly"
                                           ( Sequence _1 )
# 3217 "c2newspeak/parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'init_list) in
    Obj.repr(
# 722 "c2newspeak/parser.mly"
                                           ( _2 )
# 3224 "c2newspeak/parser.ml"
               : 'composite))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'named_init_list) in
    Obj.repr(
# 723 "c2newspeak/parser.mly"
                                           ( _2 )
# 3231 "c2newspeak/parser.ml"
               : 'composite))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'named_init) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'named_init_list) in
    Obj.repr(
# 727 "c2newspeak/parser.mly"
                                           ( _1::_3 )
# 3239 "c2newspeak/parser.ml"
               : 'named_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'named_init) in
    Obj.repr(
# 728 "c2newspeak/parser.mly"
                                           ( _1::[] )
# 3246 "c2newspeak/parser.ml"
               : 'named_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'named_init) in
    Obj.repr(
# 729 "c2newspeak/parser.mly"
                                           ( _1::[] )
# 3253 "c2newspeak/parser.ml"
               : 'named_init_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 733 "c2newspeak/parser.mly"
                                           ( (Some _2, Data _4) )
# 3261 "c2newspeak/parser.ml"
               : 'named_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'init_list) in
    Obj.repr(
# 734 "c2newspeak/parser.mly"
                                            ( (Some _2, Sequence _5) )
# 3269 "c2newspeak/parser.ml"
               : 'named_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'init) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init_list) in
    Obj.repr(
# 738 "c2newspeak/parser.mly"
                                           ( (None, _1)::_3 )
# 3277 "c2newspeak/parser.ml"
               : 'init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 739 "c2newspeak/parser.mly"
                                           ( (None, _1)::[] )
# 3284 "c2newspeak/parser.ml"
               : 'init_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 740 "c2newspeak/parser.mly"
                                           (
    Npkcontext.report_strict_warning "Parser.init_list"
      "comma terminated initializer";
  []
  )
# 3294 "c2newspeak/parser.ml"
               : 'init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pointer) in
    Obj.repr(
# 748 "c2newspeak/parser.mly"
                                           ( (_1, Abstract) )
# 3301 "c2newspeak/parser.ml"
               : 'abstract_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'direct_abstract_declarator) in
    Obj.repr(
# 749 "c2newspeak/parser.mly"
                                           ( _1 )
# 3308 "c2newspeak/parser.ml"
               : 'abstract_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pointer) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_abstract_declarator) in
    Obj.repr(
# 750 "c2newspeak/parser.mly"
                                           ( 
    let (ptr, decl) = _2 in
      (_1+ptr, decl) 
  )
# 3319 "c2newspeak/parser.ml"
               : 'abstract_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'abstract_declarator) in
    Obj.repr(
# 757 "c2newspeak/parser.mly"
                                           ( _2 )
# 3326 "c2newspeak/parser.ml"
               : 'direct_abstract_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_qualifier_list) in
    Obj.repr(
# 758 "c2newspeak/parser.mly"
                                           ( (0, Array ((0, Abstract), None)) )
# 3333 "c2newspeak/parser.ml"
               : 'direct_abstract_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression_sequence) in
    Obj.repr(
# 759 "c2newspeak/parser.mly"
                                           ( 
    (0, Array ((0, Abstract), Some _2)) 
  )
# 3342 "c2newspeak/parser.ml"
               : 'direct_abstract_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'direct_abstract_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_sequence) in
    Obj.repr(
# 763 "c2newspeak/parser.mly"
                                           ( (0, Array (_1, Some _3)) )
# 3350 "c2newspeak/parser.ml"
               : 'direct_abstract_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'direct_abstract_declarator) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'parameter_list) in
    Obj.repr(
# 765 "c2newspeak/parser.mly"
                                           ( (0, Function (_1, _3)) )
# 3358 "c2newspeak/parser.ml"
               : 'direct_abstract_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'direct_abstract_declarator) in
    Obj.repr(
# 766 "c2newspeak/parser.mly"
                                           ( (0, Function (_1, [])) )
# 3365 "c2newspeak/parser.ml"
               : 'direct_abstract_declarator))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_qualifier_list) in
    Obj.repr(
# 770 "c2newspeak/parser.mly"
                                           ( 1 )
# 3372 "c2newspeak/parser.ml"
               : 'pointer))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_qualifier_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pointer) in
    Obj.repr(
# 771 "c2newspeak/parser.mly"
                                           ( _3 + 1 )
# 3380 "c2newspeak/parser.ml"
               : 'pointer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gnuc_field_declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_list) in
    Obj.repr(
# 776 "c2newspeak/parser.mly"
                                           ( _1@_3 )
# 3388 "c2newspeak/parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gnuc_field_declaration) in
    Obj.repr(
# 777 "c2newspeak/parser.mly"
                                           ( _1 )
# 3395 "c2newspeak/parser.ml"
               : 'field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_list) in
    Obj.repr(
# 782 "c2newspeak/parser.mly"
                                           ( _1::_3 )
# 3403 "c2newspeak/parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_declaration) in
    Obj.repr(
# 783 "c2newspeak/parser.mly"
                                           ( _1::[] )
# 3410 "c2newspeak/parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 784 "c2newspeak/parser.mly"
                                           (
    let loc = get_loc () in
      (Va_arg, (0, Variable ("__builtin_newspeak_va_arg", loc)))::[] 
  )
# 3419 "c2newspeak/parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 798 "c2newspeak/parser.mly"
                                         ( Config.size_of_char )
# 3425 "c2newspeak/parser.ml"
               : 'ityp))
; (fun __caml_parser_env ->
    Obj.repr(
# 799 "c2newspeak/parser.mly"
                                         ( Config.size_of_short )
# 3431 "c2newspeak/parser.ml"
               : 'ityp))
; (fun __caml_parser_env ->
    Obj.repr(
# 800 "c2newspeak/parser.mly"
                                         ( Config.size_of_int )
# 3437 "c2newspeak/parser.ml"
               : 'ityp))
; (fun __caml_parser_env ->
    Obj.repr(
# 801 "c2newspeak/parser.mly"
                                         ( Config.size_of_long )
# 3443 "c2newspeak/parser.ml"
               : 'ityp))
; (fun __caml_parser_env ->
    Obj.repr(
# 802 "c2newspeak/parser.mly"
                                         ( Config.size_of_longlong )
# 3449 "c2newspeak/parser.ml"
               : 'ityp))
; (fun __caml_parser_env ->
    Obj.repr(
# 803 "c2newspeak/parser.mly"
                                         ( 
    Npkcontext.report_strict_warning "Parser.ityp" 
      "'short' is not normalized: use 'short int' instead";
    Config.size_of_short 
  )
# 3459 "c2newspeak/parser.ml"
               : 'ityp))
; (fun __caml_parser_env ->
    Obj.repr(
# 808 "c2newspeak/parser.mly"
                                         ( 
    Npkcontext.report_strict_warning "Parser.ityp" 
      "'long' is not normalized: use 'long int' instead";
    Config.size_of_long 
  )
# 3469 "c2newspeak/parser.ml"
               : 'ityp))
; (fun __caml_parser_env ->
    Obj.repr(
# 813 "c2newspeak/parser.mly"
                                         ( 
    Npkcontext.report_strict_warning "Parser.ityp" 
      "'long long' is not standard: use 'long long int' instead";
    Config.size_of_longlong 
  )
# 3479 "c2newspeak/parser.ml"
               : 'ityp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 824 "c2newspeak/parser.mly"
                                         ( _1 )
# 3486 "c2newspeak/parser.ml"
               : 'ident_or_tname))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 825 "c2newspeak/parser.mly"
                                         (
    Npkcontext.report_warning "Parser.ident_or_tname" 
      ("identifier "^_1^" is defined as a type, avoid using it for "
	^"another purpose");
    _1 
  )
# 3498 "c2newspeak/parser.ml"
               : 'ident_or_tname))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enum) in
    Obj.repr(
# 834 "c2newspeak/parser.mly"
                                         ( _1::[] )
# 3505 "c2newspeak/parser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'enum) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'enum_list) in
    Obj.repr(
# 835 "c2newspeak/parser.mly"
                                         ( _1::_3 )
# 3513 "c2newspeak/parser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'enum) in
    Obj.repr(
# 836 "c2newspeak/parser.mly"
                                         ( 
    Npkcontext.report_strict_warning "Parser.enum_list"   
      "unnecessary comma";  
    _1::[] 
  )
# 3524 "c2newspeak/parser.ml"
               : 'enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 844 "c2newspeak/parser.mly"
                                         ( (_1, None) )
# 3531 "c2newspeak/parser.ml"
               : 'enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 845 "c2newspeak/parser.mly"
                                         ( (_1, Some _3) )
# 3539 "c2newspeak/parser.ml"
               : 'enum))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'field_list) in
    Obj.repr(
# 849 "c2newspeak/parser.mly"
                                         ( _2 )
# 3546 "c2newspeak/parser.ml"
               : 'field_blk))
; (fun __caml_parser_env ->
    Obj.repr(
# 850 "c2newspeak/parser.mly"
                                         ( 
    Npkcontext.report_accept_warning "Parser.field_blk"
      "empty struct or union" Npkcontext.DirtySyntax;
    [] 
  )
# 3556 "c2newspeak/parser.ml"
               : 'field_blk))
; (fun __caml_parser_env ->
    Obj.repr(
# 858 "c2newspeak/parser.mly"
                                         ( Config.size_of_float )
# 3562 "c2newspeak/parser.ml"
               : 'ftyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 859 "c2newspeak/parser.mly"
                                         ( Config.size_of_double )
# 3568 "c2newspeak/parser.ml"
               : 'ftyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 860 "c2newspeak/parser.mly"
                                         ( Config.size_of_longdouble )
# 3574 "c2newspeak/parser.ml"
               : 'ftyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 864 "c2newspeak/parser.mly"
                                         ( Void )
# 3580 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ityp) in
    Obj.repr(
# 865 "c2newspeak/parser.mly"
                                         ( Integer (Newspeak.Signed, _1) )
# 3587 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ityp) in
    Obj.repr(
# 866 "c2newspeak/parser.mly"
                                         (
    Npkcontext.report_strict_warning "Parser.type_specifier" 
      "signed specifier not necessary";
    Integer (Newspeak.Signed, _2)
  )
# 3598 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 871 "c2newspeak/parser.mly"
                                         (
    Npkcontext.report_strict_warning "Parser.type_specifier"
      ("'long long unsigned int' is not normalized : "
      ^"use 'unsigned long long int' instead");
    Integer (Newspeak.Unsigned, Config.size_of_longlong)
  )
# 3609 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ityp) in
    Obj.repr(
# 877 "c2newspeak/parser.mly"
                                         ( Integer (Newspeak.Unsigned, _2) )
# 3616 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 878 "c2newspeak/parser.mly"
                                         ( 
    Npkcontext.report_strict_warning "Parser.type_specifier"
      "unspecified integer kind";
    Integer (Newspeak.Unsigned, Config.size_of_int) 
  )
# 3626 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 884 "c2newspeak/parser.mly"
                                         (
  Npkcontext.report_strict_warning "Parser.type_specifier" 
      ("'long signed int' is not normalized: "
       ^"use 'signed long int' instead");
    Integer (Newspeak.Signed, Config.size_of_long)
      )
# 3637 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 891 "c2newspeak/parser.mly"
                                         (
  Npkcontext.report_strict_warning "Parser.type_specifier" 
      ("'long signed' is not normalized: "
       ^"use 'signed long int' instead");
    Integer (Newspeak.Signed, Config.size_of_long)
      )
# 3648 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 898 "c2newspeak/parser.mly"
                                           (
  Npkcontext.report_strict_warning "Parser.type_specifier" 
      ("'long unsigned int' is not normalized: "
       ^"use 'unsigned long int' instead");
    Integer (Newspeak.Unsigned, Config.size_of_long)
  )
# 3659 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 905 "c2newspeak/parser.mly"
                                           (
  Npkcontext.report_strict_warning "Parser.type_specifier" 
      ("'long unsigned' is not normalized: "
       ^"use 'unsigned long int' instead");
    Integer (Newspeak.Unsigned, Config.size_of_long)
  )
# 3670 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 912 "c2newspeak/parser.mly"
                                          (
  Npkcontext.report_strict_warning "Parser.type_specifier" 
      ("'short signed int' is not normalized: "
       ^"use 'signed short int' instead");
    Integer (Newspeak.Signed, Config.size_of_short)
      )
# 3681 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 919 "c2newspeak/parser.mly"
                                          (
  Npkcontext.report_strict_warning "Parser.type_specifier" 
      ("'short signed' is not normalized: "
       ^"use 'signed short int' instead");
    Integer (Newspeak.Signed, Config.size_of_short)
      )
# 3692 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 926 "c2newspeak/parser.mly"
                                            (
  Npkcontext.report_strict_warning "Parser.type_specifier" 
      ("'short unsigned int' is not normalized: "
       ^"use 'unsigned short int' instead");
    Integer (Newspeak.Unsigned, Config.size_of_short)
  )
# 3703 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 933 "c2newspeak/parser.mly"
                                            (
  Npkcontext.report_strict_warning "Parser.type_specifier" 
      ("'short unsigned' is not normalized: "
       ^"use 'unsigned short int' instead");
    Integer (Newspeak.Unsigned, Config.size_of_short)
  )
# 3714 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ftyp) in
    Obj.repr(
# 940 "c2newspeak/parser.mly"
                                         ( Float _1 )
# 3721 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_blk) in
    Obj.repr(
# 941 "c2newspeak/parser.mly"
                                         ( Struct (gen_struct_id (), Some _2) )
# 3728 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident_or_tname) in
    Obj.repr(
# 942 "c2newspeak/parser.mly"
                                         ( Struct (_2, None) )
# 3735 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident_or_tname) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_blk) in
    Obj.repr(
# 943 "c2newspeak/parser.mly"
                                         ( Struct (_2, Some _3) )
# 3743 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_blk) in
    Obj.repr(
# 944 "c2newspeak/parser.mly"
                                         ( Union (gen_struct_id (), Some _2) )
# 3750 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident_or_tname) in
    Obj.repr(
# 945 "c2newspeak/parser.mly"
                                         ( Union (_2, None) )
# 3757 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ident_or_tname) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field_blk) in
    Obj.repr(
# 946 "c2newspeak/parser.mly"
                                         ( Union (_2, Some _3) )
# 3765 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 947 "c2newspeak/parser.mly"
                                         ( Name _1 )
# 3772 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    Obj.repr(
# 948 "c2newspeak/parser.mly"
                                         ( Enum (Some _3) )
# 3779 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 949 "c2newspeak/parser.mly"
                                         ( Enum None )
# 3786 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'enum_list) in
    Obj.repr(
# 951 "c2newspeak/parser.mly"
                                         ( Enum (Some _4) )
# 3794 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_specifier) in
    Obj.repr(
# 952 "c2newspeak/parser.mly"
                                         ( _3 )
# 3801 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 953 "c2newspeak/parser.mly"
                                         ( Typeof _3 )
# 3808 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 954 "c2newspeak/parser.mly"
                                         ( Va_arg )
# 3814 "c2newspeak/parser.ml"
               : 'type_specifier))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 961 "c2newspeak/parser.mly"
                                           ( build_glbdecl (true, false) _2 )
# 3821 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 962 "c2newspeak/parser.mly"
                                           ( build_fundef false _1 )
# 3828 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 963 "c2newspeak/parser.mly"
                                           ( build_fundef true _2 )
# 3835 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 964 "c2newspeak/parser.mly"
                                           ( build_fundef true _3 )
# 3842 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'attribute_name_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 966 "c2newspeak/parser.mly"
                                           ( build_fundef true _8 )
# 3850 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'optional_extension) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 969 "c2newspeak/parser.mly"
                                           (
    Npkcontext.report_ignore_warning "Parser.external_declaration" 
      "extern function definition" Npkcontext.ExternFunDef;
    let ((b, m), _) = _3 in
      build_glbdecl (false, false) (b, ((m, []), None)::[])
)
# 3863 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'optional_extension) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 976 "c2newspeak/parser.mly"
                                           ( build_glbtypedef _3 )
# 3871 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 977 "c2newspeak/parser.mly"
                                           ( build_glbdecl (false, false) _2 )
# 3878 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 978 "c2newspeak/parser.mly"
                                           ( build_glbdecl (false, false) _1 )
# 3885 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'optional_extension) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'declaration) in
    Obj.repr(
# 980 "c2newspeak/parser.mly"
                                           ( build_glbdecl (false, true) _3 )
# 3893 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'asm) in
    Obj.repr(
# 981 "c2newspeak/parser.mly"
                                           ( [] )
# 3900 "c2newspeak/parser.ml"
               : 'external_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 985 "c2newspeak/parser.mly"
                                           ( )
# 3906 "c2newspeak/parser.ml"
               : 'optional_extension))
; (fun __caml_parser_env ->
    Obj.repr(
# 986 "c2newspeak/parser.mly"
                                           ( )
# 3912 "c2newspeak/parser.ml"
               : 'optional_extension))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_list) in
    Obj.repr(
# 990 "c2newspeak/parser.mly"
                                           ( _1@_2 )
# 3920 "c2newspeak/parser.ml"
               : 'attribute_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 991 "c2newspeak/parser.mly"
                                           ( [] )
# 3926 "c2newspeak/parser.ml"
               : 'attribute_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_list) in
    Obj.repr(
# 995 "c2newspeak/parser.mly"
                                           ( _1@_2 )
# 3934 "c2newspeak/parser.ml"
               : 'extended_attribute_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'asm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'extended_attribute_list) in
    Obj.repr(
# 996 "c2newspeak/parser.mly"
                                           ( _2 )
# 3942 "c2newspeak/parser.ml"
               : 'extended_attribute_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 997 "c2newspeak/parser.mly"
                                           ( [] )
# 3948 "c2newspeak/parser.ml"
               : 'extended_attribute_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1001 "c2newspeak/parser.mly"
                                           ( )
# 3954 "c2newspeak/parser.ml"
               : 'type_qualifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute) in
    Obj.repr(
# 1002 "c2newspeak/parser.mly"
                                           ( )
# 3961 "c2newspeak/parser.ml"
               : 'type_qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 1003 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_ignore_warning "Parser.type_qualifier" 
      "type qualifier 'volatile'" Npkcontext.Volatile;
    )
# 3970 "c2newspeak/parser.ml"
               : 'type_qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 1007 "c2newspeak/parser.mly"
                                           ( )
# 3976 "c2newspeak/parser.ml"
               : 'type_qualifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 1008 "c2newspeak/parser.mly"
                                           ( )
# 3982 "c2newspeak/parser.ml"
               : 'type_qualifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'optional_extension) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field_declaration) in
    Obj.repr(
# 1013 "c2newspeak/parser.mly"
                                           ( _2 )
# 3990 "c2newspeak/parser.ml"
               : 'gnuc_field_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declaration_specifiers) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'struct_declarator_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_list) in
    Obj.repr(
# 1018 "c2newspeak/parser.mly"
                                           ( flatten_field_decl (_1, _2) )
# 3999 "c2newspeak/parser.ml"
               : 'field_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declaration_specifiers) in
    Obj.repr(
# 1019 "c2newspeak/parser.mly"
                                           ( 
    Npkcontext.report_accept_warning "Parser.field_declaration"
      "anonymous field declaration in structure" Npkcontext.DirtySyntax;
    flatten_field_decl (_1, ((0, Abstract), None)::[]) 
  )
# 4010 "c2newspeak/parser.ml"
               : 'field_declaration))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'attribute_name_list) in
    Obj.repr(
# 1028 "c2newspeak/parser.mly"
                                           ( _4 )
# 4017 "c2newspeak/parser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1029 "c2newspeak/parser.mly"
                                           ( [] )
# 4023 "c2newspeak/parser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1030 "c2newspeak/parser.mly"
                                           ( [] )
# 4029 "c2newspeak/parser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    Obj.repr(
# 1031 "c2newspeak/parser.mly"
                                           ( [] )
# 4035 "c2newspeak/parser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attribute_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_name_list) in
    Obj.repr(
# 1035 "c2newspeak/parser.mly"
                                           ( _1@_3 )
# 4043 "c2newspeak/parser.ml"
               : 'attribute_name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_name) in
    Obj.repr(
# 1036 "c2newspeak/parser.mly"
                                           ( _1 )
# 4050 "c2newspeak/parser.ml"
               : 'attribute_name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1040 "c2newspeak/parser.mly"
                                           ( 
    begin match _1 with
	"aligned" | "__aligned__" | "__cdecl__" | "noreturn" | "__noreturn__"
      | "__always_inline__" | "always_inline"  | "__nothrow__" 
      | "__pure__" | "pure" | "__gnu_inline__"
      | "__deprecated__" | "deprecated" | "__malloc__" 
      | "__warn_unused_result__" | "warn_unused_result"
      | "__unused__" | "unused" 
      | "__artificial__" | "__cold__" | "cold" -> ()
      | "dllimport" -> 
	  Npkcontext.report_warning "Parser.attribute" 
	    "ignoring attribute dllimport"
      | "packed" | "__packed__" -> 
	  Npkcontext.report_ignore_warning "Parser.attribute_name" 
	    "packed attribute" Npkcontext.Pack
      | "__transparent_union__" -> 
	  Npkcontext.report_accept_warning "Parser.attribute_name" 
	    "transparent union" Npkcontext.TransparentUnion
      | "weak" | "__weak__" ->
	  Npkcontext.report_warning "Parser.attribute" 
	    "ignoring attribute weak"
      | _ -> raise Parsing.Parse_error
    end;
    [] 
  )
# 4081 "c2newspeak/parser.ml"
               : 'attribute_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 1065 "c2newspeak/parser.mly"
                                                     (
    if (_1 = "alias") then begin
      Npkcontext.report_warning "Parser.attribute" 
      ("ignoring attribute alias")
    end 
    else if (_1 <> "__warning__") && (_1 <> "__error__") && (_1 <> "__section__") && (_1 <> "section")
    then raise Parsing.Parse_error;
    []
  )
# 4097 "c2newspeak/parser.ml"
               : 'attribute_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'integer_list) in
    Obj.repr(
# 1074 "c2newspeak/parser.mly"
                                           ( 
    match (_1, _3) with
	(("__format_arg__" | "aligned" | "__regparm__" | "regparm"), _::[]) -> []
      | (("packed" | "__packed__"), _::[]) -> 
	  Npkcontext.report_ignore_warning "Parser.attribute_name" 
	    "packed attribute" Npkcontext.Pack;
	  []
      | (("__nonnull__" | "__nonnull"), _) -> []
      | _ -> raise Parsing.Parse_error
  )
# 4114 "c2newspeak/parser.ml"
               : 'attribute_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'type_name) in
    Obj.repr(
# 1086 "c2newspeak/parser.mly"
                                            ( 
	if _1 <> "aligned" then raise Parsing.Parse_error;
	if _4 <> "__alignof__" then raise Parsing.Parse_error;
	[]
      )
# 4127 "c2newspeak/parser.ml"
               : 'attribute_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string option * string * char option * string option) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string option * string * char option * string option) in
    Obj.repr(
# 1093 "c2newspeak/parser.mly"
                                           (
(* TODO: instead of comparing all the possibilities __format__, format...
   maybe have a treatment that trims the __ first and then compares
   and do that in an uniform way??
*)
    if _1 <> "__format__" && _1 <> "format" then raise Parsing.Parse_error;
    begin match _3 with
	"__printf__" | "printf" | "__scanf__" | "scanf"
      | "__strftime__" | "strftime" | "__strfmon__" | "strfmon"-> ()
      | _ -> raise Parsing.Parse_error
    end;
    [] 
  )
# 4149 "c2newspeak/parser.ml"
               : 'attribute_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 1106 "c2newspeak/parser.mly"
                                                ( 
    if _1 <> "__mode__" then raise Parsing.Parse_error;
    let imode =
      match _3 with
	  "__QI__" -> Config.size_of_byte
	| "__HI__" -> Config.size_of_byte*2
	| "__SI__" | "__word__" -> Config.size_of_byte*4
	| "__DI__" -> Config.size_of_byte*8
	| _ -> raise Parsing.Parse_error
    in
      imode::[]
  )
# 4168 "c2newspeak/parser.ml"
               : 'attribute_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 1118 "c2newspeak/parser.mly"
                                           ( [] )
# 4174 "c2newspeak/parser.ml"
               : 'attribute_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1122 "c2newspeak/parser.mly"
                                           ( () )
# 4181 "c2newspeak/parser.ml"
               : 'string_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'string_list) in
    Obj.repr(
# 1123 "c2newspeak/parser.mly"
                                           ( () )
# 4189 "c2newspeak/parser.ml"
               : 'string_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string option * string * char option * string option) in
    Obj.repr(
# 1127 "c2newspeak/parser.mly"
                                           ( _1::[] )
# 4196 "c2newspeak/parser.ml"
               : 'integer_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string option * string * char option * string option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'integer_list) in
    Obj.repr(
# 1128 "c2newspeak/parser.mly"
                                           ( _1::_3 )
# 4204 "c2newspeak/parser.ml"
               : 'integer_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : char) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Csyntax.assertion) in
    Obj.repr(
# 1133 "c2newspeak/parser.mly"
                                           ( (SymbolToken _1)::_2 )
# 4212 "c2newspeak/parser.ml"
               : Csyntax.assertion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Csyntax.assertion) in
    Obj.repr(
# 1134 "c2newspeak/parser.mly"
                                           ( (IdentToken _1)::_2 )
# 4220 "c2newspeak/parser.ml"
               : Csyntax.assertion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Csyntax.assertion) in
    Obj.repr(
# 1135 "c2newspeak/parser.mly"
                                           ( (CstToken _1)::_2 )
# 4228 "c2newspeak/parser.ml"
               : Csyntax.assertion))
; (fun __caml_parser_env ->
    Obj.repr(
# 1136 "c2newspeak/parser.mly"
                                           ( [] )
# 4234 "c2newspeak/parser.ml"
               : Csyntax.assertion))
(* Entry parse *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry assertion *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parse (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Csyntax.t)
let assertion (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Csyntax.assertion)
